/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Page;
import com.konfigthis.client.model.PagesCreateNewPageRequest;
import com.konfigthis.client.model.PagesCreateNewPageResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PagesApi
 */
@Disabled
public class PagesApiTest {

    private static PagesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PagesApi(apiClient);
    }

    /**
     * pages
     *
     * This endpoint allows the client to create a new page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewPageTest() throws ApiException {
        String title = null;
        String description = null;
        String slug = null;
        String bodyMarkdown = null;
        String bodyJson = null;
        Boolean isTopLevelPath = null;
        String template = null;
        PagesCreateNewPageResponse response = api.createNewPage()
                .title(title)
                .description(description)
                .slug(slug)
                .bodyMarkdown(bodyMarkdown)
                .bodyJson(bodyJson)
                .isTopLevelPath(isTopLevelPath)
                .template(template)
                .execute();
        // TODO: test validations
    }

    /**
     * show details for a page
     *
     * This endpoint allows the client to retrieve details for a single Page object, specified by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        Integer id = null;
        Page response = api.getDetails(id)
                .execute();
        // TODO: test validations
    }

    /**
     * show details for all pages
     *
     * This endpoint allows the client to retrieve details for all Page objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllDetailsTest() throws ApiException {
        List<Page> response = api.listAllDetails()
                .execute();
        // TODO: test validations
    }

    /**
     * remove a page
     *
     * This endpoint allows the client to delete a single Page object, specified by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removePageByIdTest() throws ApiException {
        Integer id = null;
        Page response = api.removePageById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * update details for a page
     *
     * This endpoint allows the client to retrieve details for a single Page object, specified by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePageDetailsTest() throws ApiException {
        String title = null;
        String description = null;
        String slug = null;
        String template = null;
        Integer id = null;
        String bodyMarkdown = null;
        String bodyJson = null;
        Boolean isTopLevelPath = null;
        Object socialImage = null;
        Page response = api.updatePageDetails(title, description, slug, template, id)
                .bodyMarkdown(bodyMarkdown)
                .bodyJson(bodyJson)
                .isTopLevelPath(isTopLevelPath)
                .socialImage(socialImage)
                .execute();
        // TODO: test validations
    }

}
