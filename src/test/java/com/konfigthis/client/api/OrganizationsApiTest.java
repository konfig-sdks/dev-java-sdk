/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ArticleIndex;
import com.konfigthis.client.model.Organization;
import com.konfigthis.client.model.OrganizationsCreateNewOrganizationResponse;
import com.konfigthis.client.model.OrganizationsDeleteByIdResponse;
import com.konfigthis.client.model.OrganizationsUpdateByIdResponse;
import com.konfigthis.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationsApi
 */
@Disabled
public class OrganizationsApiTest {

    private static OrganizationsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new OrganizationsApi(apiClient);
    }

    /**
     * Create an Organization
     *
     * This endpoint allows the client to create an organization with the provided parameters.         It requires a token from a user with &#x60;admin&#x60; privileges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewOrganizationTest() throws ApiException {
        String summary = null;
        String typeOf = null;
        String username = null;
        String name = null;
        String twitterUsername = null;
        String githubUsername = null;
        String url = null;
        String location = null;
        String joinedAt = null;
        String techStack = null;
        String tagLine = null;
        String story = null;
        OrganizationsCreateNewOrganizationResponse response = api.createNewOrganization()
                .summary(summary)
                .typeOf(typeOf)
                .username(username)
                .name(name)
                .twitterUsername(twitterUsername)
                .githubUsername(githubUsername)
                .url(url)
                .location(location)
                .joinedAt(joinedAt)
                .techStack(techStack)
                .tagLine(tagLine)
                .story(story)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an Organization by id
     *
     * This endpoint allows the client to delete a single organization, specified by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByIdTest() throws ApiException {
        Integer id = null;
        OrganizationsDeleteByIdResponse response = api.deleteById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * An organization (by id)
     *
     * This endpoint allows the client to retrieve a single organization by their id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        Integer id = null;
        List<Organization> response = api.getById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * An organization (by username)
     *
     * This endpoint allows the client to retrieve a single organization by their username
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByUsernameTest() throws ApiException {
        String username = null;
        List<Organization> response = api.getByUsername(username)
                .execute();
        // TODO: test validations
    }

    /**
     * Organization&#39;s Articles
     *
     * This endpoint allows the client to retrieve a list of Articles belonging to the organization  It supports pagination, each page will contain &#x60;30&#x60; users by default.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listArticlesTest() throws ApiException {
        String organizationIdOrUsername = null;
        Integer page = null;
        Integer perPage = null;
        List<ArticleIndex> response = api.listArticles(organizationIdOrUsername)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Organizations
     *
     * This endpoint allows the client to retrieve a list of Dev organizations.    It supports pagination, each page will contain 10 tags by default.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOfDevTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        List<Organization> response = api.listOfDev()
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Organization&#39;s users
     *
     * This endpoint allows the client to retrieve a list of users belonging to the organization  It supports pagination, each page will contain &#x60;30&#x60; users by default.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        String organizationIdOrUsername = null;
        Integer page = null;
        Integer perPage = null;
        List<User> response = api.listUsers(organizationIdOrUsername)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an organization by id
     *
     * This endpoint allows the client to update an existing organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByIdTest() throws ApiException {
        Integer id = null;
        String summary = null;
        String typeOf = null;
        String username = null;
        String name = null;
        String twitterUsername = null;
        String githubUsername = null;
        String url = null;
        String location = null;
        String joinedAt = null;
        String techStack = null;
        String tagLine = null;
        String story = null;
        OrganizationsUpdateByIdResponse response = api.updateById(id)
                .summary(summary)
                .typeOf(typeOf)
                .username(username)
                .name(name)
                .twitterUsername(twitterUsername)
                .githubUsername(githubUsername)
                .url(url)
                .location(location)
                .joinedAt(joinedAt)
                .techStack(techStack)
                .tagLine(tagLine)
                .story(story)
                .execute();
        // TODO: test validations
    }

}
