/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ArticleIndex;
import com.konfigthis.client.model.ExtendedUser;
import com.konfigthis.client.model.MyUser;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.UserInviteParam;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private static UsersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UsersApi(apiClient);
    }

    /**
     * Add limited role for a User
     *
     * This endpoint allows the client to limit a user.  The user associated with the API key must have any &#39;admin&#39; or &#39;moderator&#39; role.  This specified user will be assigned the &#39;limited&#39; role. Limiting a user will limit notifications generated from new posts and comments. It doesn&#39;t delete any of the user&#39;s content or prevent them from generating new content while limited. Users are not notified of their limits in the UI, so if you want them to know about this, you must notify them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addLimitedRoleTest() throws ApiException {
        Integer id = null;
        api.addLimitedRole(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Add trusted role for a User
     *
     * This endpoint allows the client to add the trusted role to a user.           The user associated with the API key must have an &#39;admin&#39; or &#39;moderator&#39; role.           The specified user will be assigned the &#39;trusted&#39; role. Adding the trusted role to a user           allows them to upvote and downvote posts and flag content that needs investigating by admins.           Users are notified of this change in the UI, and by email.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTrustedRoleTest() throws ApiException {
        Integer id = null;
        api.addTrustedRole(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Add spam role for a User
     *
     * This endpoint allows the client to add the spam role to a user.            The user associated with the API key must have any &#39;admin&#39; or &#39;moderator&#39; role.            This specified user will be assigned the &#39;spam&#39; role. Addding the spam role to a user will stop the           user from posting new posts and comments. It doesn&#39;t delete any of the user&#39;s content, just           prevents them from creating new content while having the spam role. Users are not notified of their spaminess           in the UI, so if you want them to know about this, you must notify them
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignSpamRoleTest() throws ApiException {
        Integer id = null;
        api.assignSpamRole(id)
                .execute();
        // TODO: test validations
    }

    /**
     * User&#39;s all articles
     *
     * This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUserArticlesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        List<ArticleIndex> response = api.getAllUserArticles()
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * A User
     *
     * This endpoint allows the client to retrieve a single user, either by id or by the user&#39;s username.  For complete documentation, see the v0 API docs: https://developers.forem.com/api/v0#tag/users/operation/getUser
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdOrUsernameTest() throws ApiException {
        String id = null;
        List<ExtendedUser> response = api.getByIdOrUsername(id)
                .execute();
        // TODO: test validations
    }

    /**
     * The authenticated user
     *
     * This endpoint allows the client to retrieve information about the authenticated user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInformationTest() throws ApiException {
        List<MyUser> response = api.getInformation()
                .execute();
        // TODO: test validations
    }

    /**
     * User&#39;s articles
     *
     * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublishedListTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        List<ArticleIndex> response = api.getPublishedList()
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * User&#39;s published articles
     *
     * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublishedList_0Test() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        List<ArticleIndex> response = api.getPublishedList_0()
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * User&#39;s unpublished articles
     *
     * This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUnpublishedListTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        List<ArticleIndex> response = api.getUnpublishedList()
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Invite a User
     *
     * This endpoint allows the client to trigger an invitation to the provided email address.          It requires a token from a user with &#x60;super_admin&#x60; privileges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteUserTest() throws ApiException {
        String email = null;
        String name = null;
        api.inviteUser()
                .email(email)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Organization&#39;s users
     *
     * This endpoint allows the client to retrieve a list of users belonging to the organization  It supports pagination, each page will contain &#x60;30&#x60; users by default.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        String organizationIdOrUsername = null;
        Integer page = null;
        Integer perPage = null;
        List<User> response = api.listUsers(organizationIdOrUsername)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove limited for a User
     *
     * This endpoint allows the client to remove limits for a user.  The user associated with the API key must have any &#39;admin&#39; or &#39;moderator&#39; role.  This specified user will be restored to &#39;general&#39; status. Users are not notified of limits in the UI, so if you want them to know about this, you must notify them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeLimitsTest() throws ApiException {
        Integer id = null;
        api.removeLimits(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove spam role from a User
     *
     * This endpoint allows the client to remove the spam role for a user.            The user associated with the API key must have any &#39;admin&#39; or &#39;moderator&#39; role.            This specified user will be restored to &#39;general&#39; status. Users are not notified           of removing their spam role in the UI, so if you want them to know about this, you must           notify them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSpamRoleTest() throws ApiException {
        Integer id = null;
        api.removeSpamRole(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove trusted role from a User
     *
     * This endpoint allows the client to remove the trusted role for a user.           The user associated with the API key must have an &#39;admin&#39; or &#39;moderator&#39; role.           The specified user will be restored to &#39;general&#39; status. Users are not notified           of removing their trusted role in the UI, so if you want them to know about this, you must           notify them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTrustedRoleTest() throws ApiException {
        Integer id = null;
        api.removeTrustedRole(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Suspend a User
     *
     * This endpoint allows the client to suspend a user.  The user associated with the API key must have any &#39;admin&#39; or &#39;moderator&#39; role.  This specified user will be assigned the &#39;suspended&#39; role. Suspending a user will stop the user from posting new posts and comments. It doesn&#39;t delete any of the user&#39;s content, just prevents them from creating new content while suspended. Users are not notified of their suspension in the UI, so if you want them to know about this, you must notify them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void suspendUserTest() throws ApiException {
        Integer id = null;
        api.suspendUser(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Unpublish a User&#39;s Articles and Comments
     *
     * This endpoint allows the client to unpublish all of the articles and comments created by a user.  The user associated with the API key must have any &#39;admin&#39; or &#39;moderator&#39; role.  This specified user&#39;s articles and comments will be unpublished and will no longer be visible to the public. They will remain in the database and will set back to draft status on the specified user&#39;s  dashboard. Any notifications associated with the specified user&#39;s articles and comments will be deleted.  Note this endpoint unpublishes articles and comments asychronously: it will return a 204 NO CONTENT status code immediately, but the articles and comments will not be unpublished until the request is completed on the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unpublishUserArticlesAndCommentsTest() throws ApiException {
        Integer id = null;
        api.unpublishUserArticlesAndComments(id)
                .execute();
        // TODO: test validations
    }

}
