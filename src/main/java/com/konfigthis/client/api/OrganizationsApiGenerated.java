/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ArticleIndex;
import com.konfigthis.client.model.Organization;
import com.konfigthis.client.model.OrganizationsCreateNewOrganizationResponse;
import com.konfigthis.client.model.OrganizationsDeleteByIdResponse;
import com.konfigthis.client.model.OrganizationsUpdateByIdResponse;
import com.konfigthis.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrganizationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"api-key\" is required but no API key was provided. Please set \"api-key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewOrganizationCall(Organization organization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organization;

        // create path and map variables
        String localVarPath = "/api/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewOrganizationValidateBeforeCall(Organization organization, final ApiCallback _callback) throws ApiException {
        return createNewOrganizationCall(organization, _callback);

    }


    private ApiResponse<OrganizationsCreateNewOrganizationResponse> createNewOrganizationWithHttpInfo(Organization organization) throws ApiException {
        okhttp3.Call localVarCall = createNewOrganizationValidateBeforeCall(organization, null);
        Type localVarReturnType = new TypeToken<OrganizationsCreateNewOrganizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewOrganizationAsync(Organization organization, final ApiCallback<OrganizationsCreateNewOrganizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewOrganizationValidateBeforeCall(organization, _callback);
        Type localVarReturnType = new TypeToken<OrganizationsCreateNewOrganizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewOrganizationRequestBuilder {
        private String summary;
        private String typeOf;
        private String username;
        private String name;
        private String twitterUsername;
        private String githubUsername;
        private String url;
        private String location;
        private String joinedAt;
        private String techStack;
        private String tagLine;
        private String story;

        private CreateNewOrganizationRequestBuilder() {
        }

        /**
         * Set summary
         * @param summary  (optional)
         * @return CreateNewOrganizationRequestBuilder
         */
        public CreateNewOrganizationRequestBuilder summary(String summary) {
            this.summary = summary;
            return this;
        }
        
        /**
         * Set typeOf
         * @param typeOf  (optional)
         * @return CreateNewOrganizationRequestBuilder
         */
        public CreateNewOrganizationRequestBuilder typeOf(String typeOf) {
            this.typeOf = typeOf;
            return this;
        }
        
        /**
         * Set username
         * @param username  (optional)
         * @return CreateNewOrganizationRequestBuilder
         */
        public CreateNewOrganizationRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return CreateNewOrganizationRequestBuilder
         */
        public CreateNewOrganizationRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set twitterUsername
         * @param twitterUsername  (optional)
         * @return CreateNewOrganizationRequestBuilder
         */
        public CreateNewOrganizationRequestBuilder twitterUsername(String twitterUsername) {
            this.twitterUsername = twitterUsername;
            return this;
        }
        
        /**
         * Set githubUsername
         * @param githubUsername  (optional)
         * @return CreateNewOrganizationRequestBuilder
         */
        public CreateNewOrganizationRequestBuilder githubUsername(String githubUsername) {
            this.githubUsername = githubUsername;
            return this;
        }
        
        /**
         * Set url
         * @param url  (optional)
         * @return CreateNewOrganizationRequestBuilder
         */
        public CreateNewOrganizationRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return CreateNewOrganizationRequestBuilder
         */
        public CreateNewOrganizationRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set joinedAt
         * @param joinedAt  (optional)
         * @return CreateNewOrganizationRequestBuilder
         */
        public CreateNewOrganizationRequestBuilder joinedAt(String joinedAt) {
            this.joinedAt = joinedAt;
            return this;
        }
        
        /**
         * Set techStack
         * @param techStack  (optional)
         * @return CreateNewOrganizationRequestBuilder
         */
        public CreateNewOrganizationRequestBuilder techStack(String techStack) {
            this.techStack = techStack;
            return this;
        }
        
        /**
         * Set tagLine
         * @param tagLine  (optional)
         * @return CreateNewOrganizationRequestBuilder
         */
        public CreateNewOrganizationRequestBuilder tagLine(String tagLine) {
            this.tagLine = tagLine;
            return this;
        }
        
        /**
         * Set story
         * @param story  (optional)
         * @return CreateNewOrganizationRequestBuilder
         */
        public CreateNewOrganizationRequestBuilder story(String story) {
            this.story = story;
            return this;
        }
        
        /**
         * Build call for createNewOrganization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Organization organization = buildBodyParams();
            return createNewOrganizationCall(organization, _callback);
        }

        private Organization buildBodyParams() {
            Organization organization = new Organization();
            organization.summary(this.summary);
            organization.typeOf(this.typeOf);
            organization.username(this.username);
            organization.name(this.name);
            organization.twitterUsername(this.twitterUsername);
            organization.githubUsername(this.githubUsername);
            organization.url(this.url);
            organization.location(this.location);
            organization.joinedAt(this.joinedAt);
            organization.techStack(this.techStack);
            organization.tagLine(this.tagLine);
            organization.story(this.story);
            return organization;
        }

        /**
         * Execute createNewOrganization request
         * @return OrganizationsCreateNewOrganizationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public OrganizationsCreateNewOrganizationResponse execute() throws ApiException {
            Organization organization = buildBodyParams();
            ApiResponse<OrganizationsCreateNewOrganizationResponse> localVarResp = createNewOrganizationWithHttpInfo(organization);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewOrganization request with HTTP info returned
         * @return ApiResponse&lt;OrganizationsCreateNewOrganizationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrganizationsCreateNewOrganizationResponse> executeWithHttpInfo() throws ApiException {
            Organization organization = buildBodyParams();
            return createNewOrganizationWithHttpInfo(organization);
        }

        /**
         * Execute createNewOrganization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrganizationsCreateNewOrganizationResponse> _callback) throws ApiException {
            Organization organization = buildBodyParams();
            return createNewOrganizationAsync(organization, _callback);
        }
    }

    /**
     * Create an Organization
     * This endpoint allows the client to create an organization with the provided parameters.         It requires a token from a user with &#x60;admin&#x60; privileges.
     * @return CreateNewOrganizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewOrganizationRequestBuilder createNewOrganization() throws IllegalArgumentException {
        return new CreateNewOrganizationRequestBuilder();
    }
    private okhttp3.Call deleteByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/organizations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteById(Async)");
        }

        return deleteByIdCall(id, _callback);

    }


    private ApiResponse<OrganizationsDeleteByIdResponse> deleteByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OrganizationsDeleteByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteByIdAsync(Integer id, final ApiCallback<OrganizationsDeleteByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OrganizationsDeleteByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final Integer id;

        private DeleteByIdRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(id, _callback);
        }


        /**
         * Execute deleteById request
         * @return OrganizationsDeleteByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public OrganizationsDeleteByIdResponse execute() throws ApiException {
            ApiResponse<OrganizationsDeleteByIdResponse> localVarResp = deleteByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;OrganizationsDeleteByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrganizationsDeleteByIdResponse> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(id);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrganizationsDeleteByIdResponse> _callback) throws ApiException {
            return deleteByIdAsync(id, _callback);
        }
    }

    /**
     * Delete an Organization by id
     * This endpoint allows the client to delete a single organization, specified by id
     * @param id The ID of the organization. (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteByIdRequestBuilder(id);
    }
    private okhttp3.Call getByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/organizations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<List<Organization>> getByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(Integer id, final ApiCallback<List<Organization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final Integer id;

        private GetByIdRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return List&lt;Organization&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization </td><td>  -  </td></tr>
         </table>
         */
        public List<Organization> execute() throws ApiException {
            ApiResponse<List<Organization>> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Organization&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Organization>> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Organization>> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * An organization (by id)
     * This endpoint allows the client to retrieve a single organization by their id
     * @param id  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An Organization </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call getByUsernameCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/organizations/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByUsernameValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getByUsername(Async)");
        }

        return getByUsernameCall(username, _callback);

    }


    private ApiResponse<List<Organization>> getByUsernameWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = getByUsernameValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByUsernameAsync(String username, final ApiCallback<List<Organization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByUsernameValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByUsernameRequestBuilder {
        private final String username;

        private GetByUsernameRequestBuilder(String username) {
            this.username = username;
        }

        /**
         * Build call for getByUsername
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByUsernameCall(username, _callback);
        }


        /**
         * Execute getByUsername request
         * @return List&lt;Organization&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization </td><td>  -  </td></tr>
         </table>
         */
        public List<Organization> execute() throws ApiException {
            ApiResponse<List<Organization>> localVarResp = getByUsernameWithHttpInfo(username);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByUsername request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Organization&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Organization>> executeWithHttpInfo() throws ApiException {
            return getByUsernameWithHttpInfo(username);
        }

        /**
         * Execute getByUsername request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Organization>> _callback) throws ApiException {
            return getByUsernameAsync(username, _callback);
        }
    }

    /**
     * An organization (by username)
     * This endpoint allows the client to retrieve a single organization by their username
     * @param username  (required)
     * @return GetByUsernameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An Organization </td><td>  -  </td></tr>
     </table>
     */
    public GetByUsernameRequestBuilder getByUsername(String username) throws IllegalArgumentException {
        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new GetByUsernameRequestBuilder(username);
    }
    private okhttp3.Call listArticlesCall(String organizationIdOrUsername, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/organizations/{organization_id_or_username}/articles"
            .replace("{" + "organization_id_or_username" + "}", localVarApiClient.escapeString(organizationIdOrUsername.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listArticlesValidateBeforeCall(String organizationIdOrUsername, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationIdOrUsername' is set
        if (organizationIdOrUsername == null) {
            throw new ApiException("Missing the required parameter 'organizationIdOrUsername' when calling listArticles(Async)");
        }

        return listArticlesCall(organizationIdOrUsername, page, perPage, _callback);

    }


    private ApiResponse<List<ArticleIndex>> listArticlesWithHttpInfo(String organizationIdOrUsername, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listArticlesValidateBeforeCall(organizationIdOrUsername, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listArticlesAsync(String organizationIdOrUsername, Integer page, Integer perPage, final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listArticlesValidateBeforeCall(organizationIdOrUsername, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListArticlesRequestBuilder {
        private final String organizationIdOrUsername;
        private Integer page;
        private Integer perPage;

        private ListArticlesRequestBuilder(String organizationIdOrUsername) {
            this.organizationIdOrUsername = organizationIdOrUsername;
        }

        /**
         * Set page
         * @param page Pagination page (optional, default to 1)
         * @return ListArticlesRequestBuilder
         */
        public ListArticlesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)
         * @return ListArticlesRequestBuilder
         */
        public ListArticlesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listArticles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization&#39;s Articles (with ID) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listArticlesCall(organizationIdOrUsername, page, perPage, _callback);
        }


        /**
         * Execute listArticles request
         * @return List&lt;ArticleIndex&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization&#39;s Articles (with ID) </td><td>  -  </td></tr>
         </table>
         */
        public List<ArticleIndex> execute() throws ApiException {
            ApiResponse<List<ArticleIndex>> localVarResp = listArticlesWithHttpInfo(organizationIdOrUsername, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listArticles request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ArticleIndex&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization&#39;s Articles (with ID) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ArticleIndex>> executeWithHttpInfo() throws ApiException {
            return listArticlesWithHttpInfo(organizationIdOrUsername, page, perPage);
        }

        /**
         * Execute listArticles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization&#39;s Articles (with ID) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {
            return listArticlesAsync(organizationIdOrUsername, page, perPage, _callback);
        }
    }

    /**
     * Organization&#39;s Articles
     * This endpoint allows the client to retrieve a list of Articles belonging to the organization  It supports pagination, each page will contain &#x60;30&#x60; users by default.
     * @param organizationIdOrUsername  (required)
     * @return ListArticlesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An Organization&#39;s Articles (with ID) </td><td>  -  </td></tr>
     </table>
     */
    public ListArticlesRequestBuilder listArticles(String organizationIdOrUsername) throws IllegalArgumentException {
        if (organizationIdOrUsername == null) throw new IllegalArgumentException("\"organizationIdOrUsername\" is required but got null");
            

        return new ListArticlesRequestBuilder(organizationIdOrUsername);
    }
    private okhttp3.Call listOfDevCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOfDevValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return listOfDevCall(page, perPage, _callback);

    }


    private ApiResponse<List<Organization>> listOfDevWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listOfDevValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOfDevAsync(Integer page, Integer perPage, final ApiCallback<List<Organization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOfDevValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOfDevRequestBuilder {
        private Integer page;
        private Integer perPage;

        private ListOfDevRequestBuilder() {
        }

        /**
         * Set page
         * @param page Pagination page (optional, default to 1)
         * @return ListOfDevRequestBuilder
         */
        public ListOfDevRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 10)
         * @return ListOfDevRequestBuilder
         */
        public ListOfDevRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listOfDev
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of all organizations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOfDevCall(page, perPage, _callback);
        }


        /**
         * Execute listOfDev request
         * @return List&lt;Organization&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of all organizations </td><td>  -  </td></tr>
         </table>
         */
        public List<Organization> execute() throws ApiException {
            ApiResponse<List<Organization>> localVarResp = listOfDevWithHttpInfo(page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOfDev request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Organization&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of all organizations </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Organization>> executeWithHttpInfo() throws ApiException {
            return listOfDevWithHttpInfo(page, perPage);
        }

        /**
         * Execute listOfDev request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of all organizations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Organization>> _callback) throws ApiException {
            return listOfDevAsync(page, perPage, _callback);
        }
    }

    /**
     * Organizations
     * This endpoint allows the client to retrieve a list of Dev organizations.    It supports pagination, each page will contain 10 tags by default.
     * @return ListOfDevRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all organizations </td><td>  -  </td></tr>
     </table>
     */
    public ListOfDevRequestBuilder listOfDev() throws IllegalArgumentException {
        return new ListOfDevRequestBuilder();
    }
    private okhttp3.Call listUsersCall(String organizationIdOrUsername, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/organizations/{organization_id_or_username}/users"
            .replace("{" + "organization_id_or_username" + "}", localVarApiClient.escapeString(organizationIdOrUsername.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsersValidateBeforeCall(String organizationIdOrUsername, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationIdOrUsername' is set
        if (organizationIdOrUsername == null) {
            throw new ApiException("Missing the required parameter 'organizationIdOrUsername' when calling listUsers(Async)");
        }

        return listUsersCall(organizationIdOrUsername, page, perPage, _callback);

    }


    private ApiResponse<List<User>> listUsersWithHttpInfo(String organizationIdOrUsername, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listUsersValidateBeforeCall(organizationIdOrUsername, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUsersAsync(String organizationIdOrUsername, Integer page, Integer perPage, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsersValidateBeforeCall(organizationIdOrUsername, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUsersRequestBuilder {
        private final String organizationIdOrUsername;
        private Integer page;
        private Integer perPage;

        private ListUsersRequestBuilder(String organizationIdOrUsername) {
            this.organizationIdOrUsername = organizationIdOrUsername;
        }

        /**
         * Set page
         * @param page Pagination page (optional, default to 1)
         * @return ListUsersRequestBuilder
         */
        public ListUsersRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)
         * @return ListUsersRequestBuilder
         */
        public ListUsersRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization&#39;s users (with ID) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUsersCall(organizationIdOrUsername, page, perPage, _callback);
        }


        /**
         * Execute listUsers request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization&#39;s users (with ID) </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = listUsersWithHttpInfo(organizationIdOrUsername, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUsers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization&#39;s users (with ID) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return listUsersWithHttpInfo(organizationIdOrUsername, page, perPage);
        }

        /**
         * Execute listUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization&#39;s users (with ID) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return listUsersAsync(organizationIdOrUsername, page, perPage, _callback);
        }
    }

    /**
     * Organization&#39;s users
     * This endpoint allows the client to retrieve a list of users belonging to the organization  It supports pagination, each page will contain &#x60;30&#x60; users by default.
     * @param organizationIdOrUsername  (required)
     * @return ListUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An Organization&#39;s users (with ID) </td><td>  -  </td></tr>
     </table>
     */
    public ListUsersRequestBuilder listUsers(String organizationIdOrUsername) throws IllegalArgumentException {
        if (organizationIdOrUsername == null) throw new IllegalArgumentException("\"organizationIdOrUsername\" is required but got null");
            

        return new ListUsersRequestBuilder(organizationIdOrUsername);
    }
    private okhttp3.Call updateByIdCall(Integer id, Organization organization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organization;

        // create path and map variables
        String localVarPath = "/api/organizations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(Integer id, Organization organization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateById(Async)");
        }

        return updateByIdCall(id, organization, _callback);

    }


    private ApiResponse<OrganizationsUpdateByIdResponse> updateByIdWithHttpInfo(Integer id, Organization organization) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, organization, null);
        Type localVarReturnType = new TypeToken<OrganizationsUpdateByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(Integer id, Organization organization, final ApiCallback<OrganizationsUpdateByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, organization, _callback);
        Type localVarReturnType = new TypeToken<OrganizationsUpdateByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final Integer id;
        private String summary;
        private String typeOf;
        private String username;
        private String name;
        private String twitterUsername;
        private String githubUsername;
        private String url;
        private String location;
        private String joinedAt;
        private String techStack;
        private String tagLine;
        private String story;

        private UpdateByIdRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set summary
         * @param summary  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder summary(String summary) {
            this.summary = summary;
            return this;
        }
        
        /**
         * Set typeOf
         * @param typeOf  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder typeOf(String typeOf) {
            this.typeOf = typeOf;
            return this;
        }
        
        /**
         * Set username
         * @param username  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set twitterUsername
         * @param twitterUsername  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder twitterUsername(String twitterUsername) {
            this.twitterUsername = twitterUsername;
            return this;
        }
        
        /**
         * Set githubUsername
         * @param githubUsername  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder githubUsername(String githubUsername) {
            this.githubUsername = githubUsername;
            return this;
        }
        
        /**
         * Set url
         * @param url  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set joinedAt
         * @param joinedAt  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder joinedAt(String joinedAt) {
            this.joinedAt = joinedAt;
            return this;
        }
        
        /**
         * Set techStack
         * @param techStack  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder techStack(String techStack) {
            this.techStack = techStack;
            return this;
        }
        
        /**
         * Set tagLine
         * @param tagLine  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder tagLine(String tagLine) {
            this.tagLine = tagLine;
            return this;
        }
        
        /**
         * Set story
         * @param story  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder story(String story) {
            this.story = story;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Organization organization = buildBodyParams();
            return updateByIdCall(id, organization, _callback);
        }

        private Organization buildBodyParams() {
            Organization organization = new Organization();
            organization.summary(this.summary);
            organization.typeOf(this.typeOf);
            organization.username(this.username);
            organization.name(this.name);
            organization.twitterUsername(this.twitterUsername);
            organization.githubUsername(this.githubUsername);
            organization.url(this.url);
            organization.location(this.location);
            organization.joinedAt(this.joinedAt);
            organization.techStack(this.techStack);
            organization.tagLine(this.tagLine);
            organization.story(this.story);
            return organization;
        }

        /**
         * Execute updateById request
         * @return OrganizationsUpdateByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization </td><td>  -  </td></tr>
         </table>
         */
        public OrganizationsUpdateByIdResponse execute() throws ApiException {
            Organization organization = buildBodyParams();
            ApiResponse<OrganizationsUpdateByIdResponse> localVarResp = updateByIdWithHttpInfo(id, organization);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;OrganizationsUpdateByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrganizationsUpdateByIdResponse> executeWithHttpInfo() throws ApiException {
            Organization organization = buildBodyParams();
            return updateByIdWithHttpInfo(id, organization);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrganizationsUpdateByIdResponse> _callback) throws ApiException {
            Organization organization = buildBodyParams();
            return updateByIdAsync(id, organization, _callback);
        }
    }

    /**
     * Update an organization by id
     * This endpoint allows the client to update an existing organization.
     * @param id The ID of the organization to update. (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An Organization </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateByIdRequestBuilder(id);
    }
}
