/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Comment;
import com.konfigthis.client.model.CommentsGetThreadedCommentResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CommentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CommentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"api-key\" is required but no API key was provided. Please set \"api-key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllThreadedCall(Integer perPage, String aId, String pId, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (aId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("a_id", aId));
        }

        if (pId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p_id", pId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllThreadedValidateBeforeCall(Integer perPage, String aId, String pId, Integer page, final ApiCallback _callback) throws ApiException {
        return getAllThreadedCall(perPage, aId, pId, page, _callback);

    }


    private ApiResponse<List<Comment>> getAllThreadedWithHttpInfo(Integer perPage, String aId, String pId, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getAllThreadedValidateBeforeCall(perPage, aId, pId, page, null);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllThreadedAsync(Integer perPage, String aId, String pId, Integer page, final ApiCallback<List<Comment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllThreadedValidateBeforeCall(perPage, aId, pId, page, _callback);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllThreadedRequestBuilder {
        private Integer perPage;
        private String aId;
        private String pId;
        private Integer page;

        private GetAllThreadedRequestBuilder() {
        }

        /**
         * Set perPage
         * @param perPage Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)
         * @return GetAllThreadedRequestBuilder
         */
        public GetAllThreadedRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set aId
         * @param aId Article identifier. (optional)
         * @return GetAllThreadedRequestBuilder
         */
        public GetAllThreadedRequestBuilder aId(String aId) {
            this.aId = aId;
            return this;
        }
        
        /**
         * Set pId
         * @param pId Podcast Episode identifier. (optional)
         * @return GetAllThreadedRequestBuilder
         */
        public GetAllThreadedRequestBuilder pId(String pId) {
            this.pId = pId;
            return this;
        }
        
        /**
         * Set page
         * @param page Pagination page (optional, default to 1)
         * @return GetAllThreadedRequestBuilder
         */
        public GetAllThreadedRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for getAllThreaded
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of Comments </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllThreadedCall(perPage, aId, pId, page, _callback);
        }


        /**
         * Execute getAllThreaded request
         * @return List&lt;Comment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of Comments </td><td>  -  </td></tr>
         </table>
         */
        public List<Comment> execute() throws ApiException {
            ApiResponse<List<Comment>> localVarResp = getAllThreadedWithHttpInfo(perPage, aId, pId, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllThreaded request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Comment&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of Comments </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Comment>> executeWithHttpInfo() throws ApiException {
            return getAllThreadedWithHttpInfo(perPage, aId, pId, page);
        }

        /**
         * Execute getAllThreaded request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of Comments </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Comment>> _callback) throws ApiException {
            return getAllThreadedAsync(perPage, aId, pId, page, _callback);
        }
    }

    /**
     * Comments
     * This endpoint allows the client to retrieve all comments belonging to an article or podcast episode as threaded conversations.  It will return the all top level comments with their nested comments as threads. See the format specification for further details.  It supports pagination, each page will contain &#x60;50&#x60; top level comments (and as many child comments they have) by default.  If the page parameter is not passed, all comments of an article or podcast will be returned. 
     * @return GetAllThreadedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of Comments </td><td>  -  </td></tr>
     </table>
     */
    public GetAllThreadedRequestBuilder getAllThreaded() throws IllegalArgumentException {
        return new GetAllThreadedRequestBuilder();
    }
    private okhttp3.Call getThreadedCommentCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/comments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThreadedCommentValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getThreadedComment(Async)");
        }

        return getThreadedCommentCall(id, _callback);

    }


    private ApiResponse<CommentsGetThreadedCommentResponse> getThreadedCommentWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getThreadedCommentValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CommentsGetThreadedCommentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getThreadedCommentAsync(Integer id, final ApiCallback<CommentsGetThreadedCommentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThreadedCommentValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CommentsGetThreadedCommentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetThreadedCommentRequestBuilder {
        private final Integer id;

        private GetThreadedCommentRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getThreadedComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the Comments </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getThreadedCommentCall(id, _callback);
        }


        /**
         * Execute getThreadedComment request
         * @return CommentsGetThreadedCommentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the Comments </td><td>  -  </td></tr>
         </table>
         */
        public CommentsGetThreadedCommentResponse execute() throws ApiException {
            ApiResponse<CommentsGetThreadedCommentResponse> localVarResp = getThreadedCommentWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getThreadedComment request with HTTP info returned
         * @return ApiResponse&lt;CommentsGetThreadedCommentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the Comments </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommentsGetThreadedCommentResponse> executeWithHttpInfo() throws ApiException {
            return getThreadedCommentWithHttpInfo(id);
        }

        /**
         * Execute getThreadedComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the Comments </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommentsGetThreadedCommentResponse> _callback) throws ApiException {
            return getThreadedCommentAsync(id, _callback);
        }
    }

    /**
     * Comment by id
     * This endpoint allows the client to retrieve a comment as well as his descendants comments.    It will return the required comment (the root) with its nested descendants as a thread.    See the format specification for further details.
     * @param id Comment identifier. (required)
     * @return GetThreadedCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of the Comments </td><td>  -  </td></tr>
     </table>
     */
    public GetThreadedCommentRequestBuilder getThreadedComment(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetThreadedCommentRequestBuilder(id);
    }
}
