/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Page;
import com.konfigthis.client.model.PagesCreateNewPageRequest;
import com.konfigthis.client.model.PagesCreateNewPageResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PagesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PagesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PagesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"api-key\" is required but no API key was provided. Please set \"api-key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewPageCall(PagesCreateNewPageRequest pagesCreateNewPageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pagesCreateNewPageRequest;

        // create path and map variables
        String localVarPath = "/api/pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewPageValidateBeforeCall(PagesCreateNewPageRequest pagesCreateNewPageRequest, final ApiCallback _callback) throws ApiException {
        return createNewPageCall(pagesCreateNewPageRequest, _callback);

    }


    private ApiResponse<PagesCreateNewPageResponse> createNewPageWithHttpInfo(PagesCreateNewPageRequest pagesCreateNewPageRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewPageValidateBeforeCall(pagesCreateNewPageRequest, null);
        Type localVarReturnType = new TypeToken<PagesCreateNewPageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewPageAsync(PagesCreateNewPageRequest pagesCreateNewPageRequest, final ApiCallback<PagesCreateNewPageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewPageValidateBeforeCall(pagesCreateNewPageRequest, _callback);
        Type localVarReturnType = new TypeToken<PagesCreateNewPageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewPageRequestBuilder {
        private String title;
        private String description;
        private String slug;
        private String bodyMarkdown;
        private String bodyJson;
        private Boolean isTopLevelPath;
        private String template;

        private CreateNewPageRequestBuilder() {
        }

        /**
         * Set title
         * @param title Title of the page (optional)
         * @return CreateNewPageRequestBuilder
         */
        public CreateNewPageRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description For internal use, helps similar pages from one another (optional)
         * @return CreateNewPageRequestBuilder
         */
        public CreateNewPageRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set slug
         * @param slug Used to link to this page in URLs, must be unique and URL-safe (optional)
         * @return CreateNewPageRequestBuilder
         */
        public CreateNewPageRequestBuilder slug(String slug) {
            this.slug = slug;
            return this;
        }
        
        /**
         * Set bodyMarkdown
         * @param bodyMarkdown The text (in markdown) of the ad (required) (optional)
         * @return CreateNewPageRequestBuilder
         */
        public CreateNewPageRequestBuilder bodyMarkdown(String bodyMarkdown) {
            this.bodyMarkdown = bodyMarkdown;
            return this;
        }
        
        /**
         * Set bodyJson
         * @param bodyJson For JSON pages, the JSON body (optional)
         * @return CreateNewPageRequestBuilder
         */
        public CreateNewPageRequestBuilder bodyJson(String bodyJson) {
            this.bodyJson = bodyJson;
            return this;
        }
        
        /**
         * Set isTopLevelPath
         * @param isTopLevelPath If true, the page is available at &#39;/{slug}&#39; instead of &#39;/page/{slug}&#39;, use with caution (optional)
         * @return CreateNewPageRequestBuilder
         */
        public CreateNewPageRequestBuilder isTopLevelPath(Boolean isTopLevelPath) {
            this.isTopLevelPath = isTopLevelPath;
            return this;
        }
        
        /**
         * Set template
         * @param template Controls what kind of layout the page is rendered in (optional, default to contained)
         * @return CreateNewPageRequestBuilder
         */
        public CreateNewPageRequestBuilder template(String template) {
            this.template = template;
            return this;
        }
        
        /**
         * Build call for createNewPage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PagesCreateNewPageRequest pagesCreateNewPageRequest = buildBodyParams();
            return createNewPageCall(pagesCreateNewPageRequest, _callback);
        }

        private PagesCreateNewPageRequest buildBodyParams() {
            PagesCreateNewPageRequest pagesCreateNewPageRequest = new PagesCreateNewPageRequest();
            pagesCreateNewPageRequest.title(this.title);
            pagesCreateNewPageRequest.description(this.description);
            pagesCreateNewPageRequest.slug(this.slug);
            pagesCreateNewPageRequest.bodyMarkdown(this.bodyMarkdown);
            pagesCreateNewPageRequest.bodyJson(this.bodyJson);
            pagesCreateNewPageRequest.isTopLevelPath(this.isTopLevelPath);
            if (this.template != null)
            pagesCreateNewPageRequest.template(PagesCreateNewPageRequest.TemplateEnum.fromValue(this.template));
            return pagesCreateNewPageRequest;
        }

        /**
         * Execute createNewPage request
         * @return PagesCreateNewPageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public PagesCreateNewPageResponse execute() throws ApiException {
            PagesCreateNewPageRequest pagesCreateNewPageRequest = buildBodyParams();
            ApiResponse<PagesCreateNewPageResponse> localVarResp = createNewPageWithHttpInfo(pagesCreateNewPageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewPage request with HTTP info returned
         * @return ApiResponse&lt;PagesCreateNewPageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagesCreateNewPageResponse> executeWithHttpInfo() throws ApiException {
            PagesCreateNewPageRequest pagesCreateNewPageRequest = buildBodyParams();
            return createNewPageWithHttpInfo(pagesCreateNewPageRequest);
        }

        /**
         * Execute createNewPage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagesCreateNewPageResponse> _callback) throws ApiException {
            PagesCreateNewPageRequest pagesCreateNewPageRequest = buildBodyParams();
            return createNewPageAsync(pagesCreateNewPageRequest, _callback);
        }
    }

    /**
     * pages
     * This endpoint allows the client to create a new page.
     * @return CreateNewPageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewPageRequestBuilder createNewPage() throws IllegalArgumentException {
        return new CreateNewPageRequestBuilder();
    }
    private okhttp3.Call getDetailsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pages/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDetails(Async)");
        }

        return getDetailsCall(id, _callback);

    }


    private ApiResponse<Page> getDetailsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(Integer id, final ApiCallback<Page> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final Integer id;

        private GetDetailsRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(id, _callback);
        }


        /**
         * Execute getDetails request
         * @return Page
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public Page execute() throws ApiException {
            ApiResponse<Page> localVarResp = getDetailsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;Page&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Page> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(id);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Page> _callback) throws ApiException {
            return getDetailsAsync(id, _callback);
        }
    }

    /**
     * show details for a page
     * This endpoint allows the client to retrieve details for a single Page object, specified by ID.
     * @param id The ID of the page. (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetDetailsRequestBuilder(id);
    }
    private okhttp3.Call listAllDetailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllDetailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAllDetailsCall(_callback);

    }


    private ApiResponse<List<Page>> listAllDetailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAllDetailsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Page>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllDetailsAsync(final ApiCallback<List<Page>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllDetailsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Page>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllDetailsRequestBuilder {

        private ListAllDetailsRequestBuilder() {
        }

        /**
         * Build call for listAllDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllDetailsCall(_callback);
        }


        /**
         * Execute listAllDetails request
         * @return List&lt;Page&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public List<Page> execute() throws ApiException {
            ApiResponse<List<Page>> localVarResp = listAllDetailsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllDetails request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Page&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Page>> executeWithHttpInfo() throws ApiException {
            return listAllDetailsWithHttpInfo();
        }

        /**
         * Execute listAllDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Page>> _callback) throws ApiException {
            return listAllDetailsAsync(_callback);
        }
    }

    /**
     * show details for all pages
     * This endpoint allows the client to retrieve details for all Page objects.
     * @return ListAllDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public ListAllDetailsRequestBuilder listAllDetails() throws IllegalArgumentException {
        return new ListAllDetailsRequestBuilder();
    }
    private okhttp3.Call removePageByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pages/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePageByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removePageById(Async)");
        }

        return removePageByIdCall(id, _callback);

    }


    private ApiResponse<Page> removePageByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = removePageByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removePageByIdAsync(Integer id, final ApiCallback<Page> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePageByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemovePageByIdRequestBuilder {
        private final Integer id;

        private RemovePageByIdRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for removePageById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePageByIdCall(id, _callback);
        }


        /**
         * Execute removePageById request
         * @return Page
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public Page execute() throws ApiException {
            ApiResponse<Page> localVarResp = removePageByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removePageById request with HTTP info returned
         * @return ApiResponse&lt;Page&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Page> executeWithHttpInfo() throws ApiException {
            return removePageByIdWithHttpInfo(id);
        }

        /**
         * Execute removePageById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Page> _callback) throws ApiException {
            return removePageByIdAsync(id, _callback);
        }
    }

    /**
     * remove a page
     * This endpoint allows the client to delete a single Page object, specified by ID.
     * @param id The ID of the page. (required)
     * @return RemovePageByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public RemovePageByIdRequestBuilder removePageById(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new RemovePageByIdRequestBuilder(id);
    }
    private okhttp3.Call updatePageDetailsCall(Integer id, Page page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = page;

        // create path and map variables
        String localVarPath = "/api/pages/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePageDetailsValidateBeforeCall(Integer id, Page page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePageDetails(Async)");
        }

        return updatePageDetailsCall(id, page, _callback);

    }


    private ApiResponse<Page> updatePageDetailsWithHttpInfo(Integer id, Page page) throws ApiException {
        okhttp3.Call localVarCall = updatePageDetailsValidateBeforeCall(id, page, null);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePageDetailsAsync(Integer id, Page page, final ApiCallback<Page> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePageDetailsValidateBeforeCall(id, page, _callback);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePageDetailsRequestBuilder {
        private final String title;
        private final String description;
        private final String slug;
        private final String template;
        private final Integer id;
        private String bodyMarkdown;
        private String bodyJson;
        private Boolean isTopLevelPath;
        private Object socialImage;

        private UpdatePageDetailsRequestBuilder(String title, String description, String slug, String template, Integer id) {
            this.title = title;
            this.description = description;
            this.slug = slug;
            this.template = template;
            this.id = id;
        }

        /**
         * Set bodyMarkdown
         * @param bodyMarkdown The text (in markdown) of the ad (required) (optional)
         * @return UpdatePageDetailsRequestBuilder
         */
        public UpdatePageDetailsRequestBuilder bodyMarkdown(String bodyMarkdown) {
            this.bodyMarkdown = bodyMarkdown;
            return this;
        }
        
        /**
         * Set bodyJson
         * @param bodyJson For JSON pages, the JSON body (optional)
         * @return UpdatePageDetailsRequestBuilder
         */
        public UpdatePageDetailsRequestBuilder bodyJson(String bodyJson) {
            this.bodyJson = bodyJson;
            return this;
        }
        
        /**
         * Set isTopLevelPath
         * @param isTopLevelPath If true, the page is available at &#39;/{slug}&#39; instead of &#39;/page/{slug}&#39;, use with caution (optional)
         * @return UpdatePageDetailsRequestBuilder
         */
        public UpdatePageDetailsRequestBuilder isTopLevelPath(Boolean isTopLevelPath) {
            this.isTopLevelPath = isTopLevelPath;
            return this;
        }
        
        /**
         * Set socialImage
         * @param socialImage  (optional)
         * @return UpdatePageDetailsRequestBuilder
         */
        public UpdatePageDetailsRequestBuilder socialImage(Object socialImage) {
            this.socialImage = socialImage;
            return this;
        }
        
        /**
         * Build call for updatePageDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Page page = buildBodyParams();
            return updatePageDetailsCall(id, page, _callback);
        }

        private Page buildBodyParams() {
            Page page = new Page();
            page.title(this.title);
            page.description(this.description);
            page.slug(this.slug);
            page.bodyMarkdown(this.bodyMarkdown);
            page.bodyJson(this.bodyJson);
            page.isTopLevelPath(this.isTopLevelPath);
            page.socialImage(this.socialImage);
            if (this.template != null)
            page.template(Page.TemplateEnum.fromValue(this.template));
            return page;
        }

        /**
         * Execute updatePageDetails request
         * @return Page
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public Page execute() throws ApiException {
            Page page = buildBodyParams();
            ApiResponse<Page> localVarResp = updatePageDetailsWithHttpInfo(id, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePageDetails request with HTTP info returned
         * @return ApiResponse&lt;Page&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Page> executeWithHttpInfo() throws ApiException {
            Page page = buildBodyParams();
            return updatePageDetailsWithHttpInfo(id, page);
        }

        /**
         * Execute updatePageDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Page> _callback) throws ApiException {
            Page page = buildBodyParams();
            return updatePageDetailsAsync(id, page, _callback);
        }
    }

    /**
     * update details for a page
     * This endpoint allows the client to retrieve details for a single Page object, specified by ID.
     * @param id The ID of the page. (required)
     * @return UpdatePageDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePageDetailsRequestBuilder updatePageDetails(String title, String description, String slug, String template, Integer id) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (slug == null) throw new IllegalArgumentException("\"slug\" is required but got null");
            

        if (template == null) throw new IllegalArgumentException("\"template\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdatePageDetailsRequestBuilder(title, description, slug, template, id);
    }
}
