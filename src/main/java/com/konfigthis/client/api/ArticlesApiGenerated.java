/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Article;
import com.konfigthis.client.model.ArticleArticle;
import com.konfigthis.client.model.ArticleIndex;
import com.konfigthis.client.model.ArticlesCreateNewArticleResponse;
import com.konfigthis.client.model.ArticlesUpdateByIdResponse;
import com.konfigthis.client.model.VideoArticle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ArticlesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ArticlesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ArticlesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"api-key\" is required but no API key was provided. Please set \"api-key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewArticleCall(Article article, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = article;

        // create path and map variables
        String localVarPath = "/api/articles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewArticleValidateBeforeCall(Article article, final ApiCallback _callback) throws ApiException {
        return createNewArticleCall(article, _callback);

    }


    private ApiResponse<ArticlesCreateNewArticleResponse> createNewArticleWithHttpInfo(Article article) throws ApiException {
        okhttp3.Call localVarCall = createNewArticleValidateBeforeCall(article, null);
        Type localVarReturnType = new TypeToken<ArticlesCreateNewArticleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewArticleAsync(Article article, final ApiCallback<ArticlesCreateNewArticleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewArticleValidateBeforeCall(article, _callback);
        Type localVarReturnType = new TypeToken<ArticlesCreateNewArticleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewArticleRequestBuilder {
        private ArticleArticle article;

        private CreateNewArticleRequestBuilder() {
        }

        /**
         * Set article
         * @param article  (optional)
         * @return CreateNewArticleRequestBuilder
         */
        public CreateNewArticleRequestBuilder article(ArticleArticle article) {
            this.article = article;
            return this;
        }
        
        /**
         * Build call for createNewArticle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An Article </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Article article = buildBodyParams();
            return createNewArticleCall(article, _callback);
        }

        private Article buildBodyParams() {
            Article article = new Article();
            article.article(this.article);
            return article;
        }

        /**
         * Execute createNewArticle request
         * @return ArticlesCreateNewArticleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An Article </td><td>  -  </td></tr>
         </table>
         */
        public ArticlesCreateNewArticleResponse execute() throws ApiException {
            Article article = buildBodyParams();
            ApiResponse<ArticlesCreateNewArticleResponse> localVarResp = createNewArticleWithHttpInfo(article);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewArticle request with HTTP info returned
         * @return ApiResponse&lt;ArticlesCreateNewArticleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An Article </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ArticlesCreateNewArticleResponse> executeWithHttpInfo() throws ApiException {
            Article article = buildBodyParams();
            return createNewArticleWithHttpInfo(article);
        }

        /**
         * Execute createNewArticle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An Article </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ArticlesCreateNewArticleResponse> _callback) throws ApiException {
            Article article = buildBodyParams();
            return createNewArticleAsync(article, _callback);
        }
    }

    /**
     * Publish article
     * This endpoint allows the client to create a new article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     * @return CreateNewArticleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An Article </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewArticleRequestBuilder createNewArticle() throws IllegalArgumentException {
        return new CreateNewArticleRequestBuilder();
    }
    private okhttp3.Call getAllUserArticlesCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/articles/me/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUserArticlesValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getAllUserArticlesCall(page, perPage, _callback);

    }


    private ApiResponse<List<ArticleIndex>> getAllUserArticlesWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllUserArticlesValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllUserArticlesAsync(Integer page, Integer perPage, final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUserArticlesValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllUserArticlesRequestBuilder {
        private Integer page;
        private Integer perPage;

        private GetAllUserArticlesRequestBuilder() {
        }

        /**
         * Set page
         * @param page Pagination page (optional, default to 1)
         * @return GetAllUserArticlesRequestBuilder
         */
        public GetAllUserArticlesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)
         * @return GetAllUserArticlesRequestBuilder
         */
        public GetAllUserArticlesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllUserArticles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllUserArticlesCall(page, perPage, _callback);
        }


        /**
         * Execute getAllUserArticles request
         * @return List&lt;ArticleIndex&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
         </table>
         */
        public List<ArticleIndex> execute() throws ApiException {
            ApiResponse<List<ArticleIndex>> localVarResp = getAllUserArticlesWithHttpInfo(page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllUserArticles request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ArticleIndex&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ArticleIndex>> executeWithHttpInfo() throws ApiException {
            return getAllUserArticlesWithHttpInfo(page, perPage);
        }

        /**
         * Execute getAllUserArticles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {
            return getAllUserArticlesAsync(page, perPage, _callback);
        }
    }

    /**
     * User&#39;s all articles
     * This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
     * @return GetAllUserArticlesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
     </table>
     */
    public GetAllUserArticlesRequestBuilder getAllUserArticles() throws IllegalArgumentException {
        return new GetAllUserArticlesRequestBuilder();
    }
    private okhttp3.Call getByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/articles/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<List<ArticleIndex>> getByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(Integer id, final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final Integer id;

        private GetByIdRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Article </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return List&lt;ArticleIndex&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Article </td><td>  -  </td></tr>
         </table>
         */
        public List<ArticleIndex> execute() throws ApiException {
            ApiResponse<List<ArticleIndex>> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ArticleIndex&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Article </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ArticleIndex>> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Article </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * Published article by id
     * This endpoint allows the client to retrieve a single published article given its &#x60;id&#x60;.
     * @param id  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An Article </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call getByPathCall(String username, String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/articles/{username}/{slug}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByPathValidateBeforeCall(String username, String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getByPath(Async)");
        }

        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling getByPath(Async)");
        }

        return getByPathCall(username, slug, _callback);

    }


    private ApiResponse<List<ArticleIndex>> getByPathWithHttpInfo(String username, String slug) throws ApiException {
        okhttp3.Call localVarCall = getByPathValidateBeforeCall(username, slug, null);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByPathAsync(String username, String slug, final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByPathValidateBeforeCall(username, slug, _callback);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByPathRequestBuilder {
        private final String username;
        private final String slug;

        private GetByPathRequestBuilder(String username, String slug) {
            this.username = username;
            this.slug = slug;
        }

        /**
         * Build call for getByPath
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Article </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByPathCall(username, slug, _callback);
        }


        /**
         * Execute getByPath request
         * @return List&lt;ArticleIndex&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Article </td><td>  -  </td></tr>
         </table>
         */
        public List<ArticleIndex> execute() throws ApiException {
            ApiResponse<List<ArticleIndex>> localVarResp = getByPathWithHttpInfo(username, slug);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByPath request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ArticleIndex&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Article </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ArticleIndex>> executeWithHttpInfo() throws ApiException {
            return getByPathWithHttpInfo(username, slug);
        }

        /**
         * Execute getByPath request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Article </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {
            return getByPathAsync(username, slug, _callback);
        }
    }

    /**
     * Published article by path
     * This endpoint allows the client to retrieve a single published article given its &#x60;path&#x60;.
     * @param username  (required)
     * @param slug  (required)
     * @return GetByPathRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An Article </td><td>  -  </td></tr>
     </table>
     */
    public GetByPathRequestBuilder getByPath(String username, String slug) throws IllegalArgumentException {
        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        if (slug == null) throw new IllegalArgumentException("\"slug\" is required but got null");
            

        return new GetByPathRequestBuilder(username, slug);
    }
    private okhttp3.Call getPublishedListCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/articles/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublishedListValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getPublishedListCall(page, perPage, _callback);

    }


    private ApiResponse<List<ArticleIndex>> getPublishedListWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getPublishedListValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPublishedListAsync(Integer page, Integer perPage, final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublishedListValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPublishedListRequestBuilder {
        private Integer page;
        private Integer perPage;

        private GetPublishedListRequestBuilder() {
        }

        /**
         * Set page
         * @param page Pagination page (optional, default to 1)
         * @return GetPublishedListRequestBuilder
         */
        public GetPublishedListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)
         * @return GetPublishedListRequestBuilder
         */
        public GetPublishedListRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getPublishedList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPublishedListCall(page, perPage, _callback);
        }


        /**
         * Execute getPublishedList request
         * @return List&lt;ArticleIndex&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
         </table>
         */
        public List<ArticleIndex> execute() throws ApiException {
            ApiResponse<List<ArticleIndex>> localVarResp = getPublishedListWithHttpInfo(page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPublishedList request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ArticleIndex&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ArticleIndex>> executeWithHttpInfo() throws ApiException {
            return getPublishedListWithHttpInfo(page, perPage);
        }

        /**
         * Execute getPublishedList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {
            return getPublishedListAsync(page, perPage, _callback);
        }
    }

    /**
     * User&#39;s articles
     * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
     * @return GetPublishedListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
     </table>
     */
    public GetPublishedListRequestBuilder getPublishedList() throws IllegalArgumentException {
        return new GetPublishedListRequestBuilder();
    }
    private okhttp3.Call getPublishedList_0Call(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/articles/me/published";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublishedList_0ValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getPublishedList_0Call(page, perPage, _callback);

    }


    private ApiResponse<List<ArticleIndex>> getPublishedList_0WithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getPublishedList_0ValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPublishedList_0Async(Integer page, Integer perPage, final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublishedList_0ValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPublishedList0RequestBuilder {
        private Integer page;
        private Integer perPage;

        private GetPublishedList0RequestBuilder() {
        }

        /**
         * Set page
         * @param page Pagination page (optional, default to 1)
         * @return GetPublishedList0RequestBuilder
         */
        public GetPublishedList0RequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)
         * @return GetPublishedList0RequestBuilder
         */
        public GetPublishedList0RequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getPublishedList_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPublishedList_0Call(page, perPage, _callback);
        }


        /**
         * Execute getPublishedList_0 request
         * @return List&lt;ArticleIndex&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
         </table>
         */
        public List<ArticleIndex> execute() throws ApiException {
            ApiResponse<List<ArticleIndex>> localVarResp = getPublishedList_0WithHttpInfo(page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPublishedList_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ArticleIndex&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ArticleIndex>> executeWithHttpInfo() throws ApiException {
            return getPublishedList_0WithHttpInfo(page, perPage);
        }

        /**
         * Execute getPublishedList_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {
            return getPublishedList_0Async(page, perPage, _callback);
        }
    }

    /**
     * User&#39;s published articles
     * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
     * @return GetPublishedList0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
     </table>
     */
    public GetPublishedList0RequestBuilder getPublishedList_0() throws IllegalArgumentException {
        return new GetPublishedList0RequestBuilder();
    }
    private okhttp3.Call getUnpublishedListCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/articles/me/unpublished";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnpublishedListValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getUnpublishedListCall(page, perPage, _callback);

    }


    private ApiResponse<List<ArticleIndex>> getUnpublishedListWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getUnpublishedListValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUnpublishedListAsync(Integer page, Integer perPage, final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUnpublishedListValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUnpublishedListRequestBuilder {
        private Integer page;
        private Integer perPage;

        private GetUnpublishedListRequestBuilder() {
        }

        /**
         * Set page
         * @param page Pagination page (optional, default to 1)
         * @return GetUnpublishedListRequestBuilder
         */
        public GetUnpublishedListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)
         * @return GetUnpublishedListRequestBuilder
         */
        public GetUnpublishedListRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getUnpublishedList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUnpublishedListCall(page, perPage, _callback);
        }


        /**
         * Execute getUnpublishedList request
         * @return List&lt;ArticleIndex&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
         </table>
         */
        public List<ArticleIndex> execute() throws ApiException {
            ApiResponse<List<ArticleIndex>> localVarResp = getUnpublishedListWithHttpInfo(page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUnpublishedList request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ArticleIndex&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ArticleIndex>> executeWithHttpInfo() throws ApiException {
            return getUnpublishedListWithHttpInfo(page, perPage);
        }

        /**
         * Execute getUnpublishedList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {
            return getUnpublishedListAsync(page, perPage, _callback);
        }
    }

    /**
     * User&#39;s unpublished articles
     * This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
     * @return GetUnpublishedListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of the authenticated user&#39;s Articles </td><td>  -  </td></tr>
     </table>
     */
    public GetUnpublishedListRequestBuilder getUnpublishedList() throws IllegalArgumentException {
        return new GetUnpublishedListRequestBuilder();
    }
    private okhttp3.Call listArticlesCall(String organizationIdOrUsername, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/organizations/{organization_id_or_username}/articles"
            .replace("{" + "organization_id_or_username" + "}", localVarApiClient.escapeString(organizationIdOrUsername.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listArticlesValidateBeforeCall(String organizationIdOrUsername, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationIdOrUsername' is set
        if (organizationIdOrUsername == null) {
            throw new ApiException("Missing the required parameter 'organizationIdOrUsername' when calling listArticles(Async)");
        }

        return listArticlesCall(organizationIdOrUsername, page, perPage, _callback);

    }


    private ApiResponse<List<ArticleIndex>> listArticlesWithHttpInfo(String organizationIdOrUsername, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listArticlesValidateBeforeCall(organizationIdOrUsername, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listArticlesAsync(String organizationIdOrUsername, Integer page, Integer perPage, final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listArticlesValidateBeforeCall(organizationIdOrUsername, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListArticlesRequestBuilder {
        private final String organizationIdOrUsername;
        private Integer page;
        private Integer perPage;

        private ListArticlesRequestBuilder(String organizationIdOrUsername) {
            this.organizationIdOrUsername = organizationIdOrUsername;
        }

        /**
         * Set page
         * @param page Pagination page (optional, default to 1)
         * @return ListArticlesRequestBuilder
         */
        public ListArticlesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)
         * @return ListArticlesRequestBuilder
         */
        public ListArticlesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listArticles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization&#39;s Articles (with ID) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listArticlesCall(organizationIdOrUsername, page, perPage, _callback);
        }


        /**
         * Execute listArticles request
         * @return List&lt;ArticleIndex&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization&#39;s Articles (with ID) </td><td>  -  </td></tr>
         </table>
         */
        public List<ArticleIndex> execute() throws ApiException {
            ApiResponse<List<ArticleIndex>> localVarResp = listArticlesWithHttpInfo(organizationIdOrUsername, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listArticles request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ArticleIndex&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization&#39;s Articles (with ID) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ArticleIndex>> executeWithHttpInfo() throws ApiException {
            return listArticlesWithHttpInfo(organizationIdOrUsername, page, perPage);
        }

        /**
         * Execute listArticles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Organization&#39;s Articles (with ID) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {
            return listArticlesAsync(organizationIdOrUsername, page, perPage, _callback);
        }
    }

    /**
     * Organization&#39;s Articles
     * This endpoint allows the client to retrieve a list of Articles belonging to the organization  It supports pagination, each page will contain &#x60;30&#x60; users by default.
     * @param organizationIdOrUsername  (required)
     * @return ListArticlesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An Organization&#39;s Articles (with ID) </td><td>  -  </td></tr>
     </table>
     */
    public ListArticlesRequestBuilder listArticles(String organizationIdOrUsername) throws IllegalArgumentException {
        if (organizationIdOrUsername == null) throw new IllegalArgumentException("\"organizationIdOrUsername\" is required but got null");
            

        return new ListArticlesRequestBuilder(organizationIdOrUsername);
    }
    private okhttp3.Call listByPopularityCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByPopularityValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return listByPopularityCall(page, perPage, _callback);

    }


    private ApiResponse<List<VideoArticle>> listByPopularityWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listByPopularityValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<List<VideoArticle>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByPopularityAsync(Integer page, Integer perPage, final ApiCallback<List<VideoArticle>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByPopularityValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<VideoArticle>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByPopularityRequestBuilder {
        private Integer page;
        private Integer perPage;

        private ListByPopularityRequestBuilder() {
        }

        /**
         * Set page
         * @param page Pagination page (optional, default to 1)
         * @return ListByPopularityRequestBuilder
         */
        public ListByPopularityRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 24)
         * @return ListByPopularityRequestBuilder
         */
        public ListByPopularityRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listByPopularity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of all articles with videos </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByPopularityCall(page, perPage, _callback);
        }


        /**
         * Execute listByPopularity request
         * @return List&lt;VideoArticle&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of all articles with videos </td><td>  -  </td></tr>
         </table>
         */
        public List<VideoArticle> execute() throws ApiException {
            ApiResponse<List<VideoArticle>> localVarResp = listByPopularityWithHttpInfo(page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByPopularity request with HTTP info returned
         * @return ApiResponse&lt;List&lt;VideoArticle&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of all articles with videos </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<VideoArticle>> executeWithHttpInfo() throws ApiException {
            return listByPopularityWithHttpInfo(page, perPage);
        }

        /**
         * Execute listByPopularity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of all articles with videos </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<VideoArticle>> _callback) throws ApiException {
            return listByPopularityAsync(page, perPage, _callback);
        }
    }

    /**
     * Articles with a video
     * This endpoint allows the client to retrieve a list of articles that are uploaded with a video.  It will only return published video articles ordered by descending popularity.  It supports pagination, each page will contain 24 articles by default.
     * @return ListByPopularityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of all articles with videos </td><td>  -  </td></tr>
     </table>
     */
    public ListByPopularityRequestBuilder listByPopularity() throws IllegalArgumentException {
        return new ListByPopularityRequestBuilder();
    }
    private okhttp3.Call listLatestPublishedCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/articles/latest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLatestPublishedValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return listLatestPublishedCall(page, perPage, _callback);

    }


    private ApiResponse<List<ArticleIndex>> listLatestPublishedWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listLatestPublishedValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLatestPublishedAsync(Integer page, Integer perPage, final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLatestPublishedValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLatestPublishedRequestBuilder {
        private Integer page;
        private Integer perPage;

        private ListLatestPublishedRequestBuilder() {
        }

        /**
         * Set page
         * @param page Pagination page (optional, default to 1)
         * @return ListLatestPublishedRequestBuilder
         */
        public ListLatestPublishedRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)
         * @return ListLatestPublishedRequestBuilder
         */
        public ListLatestPublishedRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listLatestPublished
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of Articles </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLatestPublishedCall(page, perPage, _callback);
        }


        /**
         * Execute listLatestPublished request
         * @return List&lt;ArticleIndex&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of Articles </td><td>  -  </td></tr>
         </table>
         */
        public List<ArticleIndex> execute() throws ApiException {
            ApiResponse<List<ArticleIndex>> localVarResp = listLatestPublishedWithHttpInfo(page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLatestPublished request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ArticleIndex&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of Articles </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ArticleIndex>> executeWithHttpInfo() throws ApiException {
            return listLatestPublishedWithHttpInfo(page, perPage);
        }

        /**
         * Execute listLatestPublished request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of Articles </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {
            return listLatestPublishedAsync(page, perPage, _callback);
        }
    }

    /**
     * Published articles sorted by published date
     * This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.  It supports pagination, each page will contain 30 articles by default.
     * @return ListLatestPublishedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of Articles </td><td>  -  </td></tr>
     </table>
     */
    public ListLatestPublishedRequestBuilder listLatestPublished() throws IllegalArgumentException {
        return new ListLatestPublishedRequestBuilder();
    }
    private okhttp3.Call listPublishedArticlesCall(Integer page, Integer perPage, String tag, String tags, String tagsExclude, String username, String state, Integer top, Integer collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/articles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (tagsExclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags_exclude", tagsExclude));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collection_id", collectionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPublishedArticlesValidateBeforeCall(Integer page, Integer perPage, String tag, String tags, String tagsExclude, String username, String state, Integer top, Integer collectionId, final ApiCallback _callback) throws ApiException {
        return listPublishedArticlesCall(page, perPage, tag, tags, tagsExclude, username, state, top, collectionId, _callback);

    }


    private ApiResponse<List<ArticleIndex>> listPublishedArticlesWithHttpInfo(Integer page, Integer perPage, String tag, String tags, String tagsExclude, String username, String state, Integer top, Integer collectionId) throws ApiException {
        okhttp3.Call localVarCall = listPublishedArticlesValidateBeforeCall(page, perPage, tag, tags, tagsExclude, username, state, top, collectionId, null);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPublishedArticlesAsync(Integer page, Integer perPage, String tag, String tags, String tagsExclude, String username, String state, Integer top, Integer collectionId, final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPublishedArticlesValidateBeforeCall(page, perPage, tag, tags, tagsExclude, username, state, top, collectionId, _callback);
        Type localVarReturnType = new TypeToken<List<ArticleIndex>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPublishedArticlesRequestBuilder {
        private Integer page;
        private Integer perPage;
        private String tag;
        private String tags;
        private String tagsExclude;
        private String username;
        private String state;
        private Integer top;
        private Integer collectionId;

        private ListPublishedArticlesRequestBuilder() {
        }

        /**
         * Set page
         * @param page Pagination page (optional, default to 1)
         * @return ListPublishedArticlesRequestBuilder
         */
        public ListPublishedArticlesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)
         * @return ListPublishedArticlesRequestBuilder
         */
        public ListPublishedArticlesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set tag
         * @param tag Using this parameter will retrieve articles that contain the requested tag. Articles will be ordered by descending popularity.This parameter can be used in conjuction with &#x60;top&#x60;. (optional)
         * @return ListPublishedArticlesRequestBuilder
         */
        public ListPublishedArticlesRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set tags
         * @param tags Using this parameter will retrieve articles with any of the comma-separated tags. Articles will be ordered by descending popularity. (optional)
         * @return ListPublishedArticlesRequestBuilder
         */
        public ListPublishedArticlesRequestBuilder tags(String tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set tagsExclude
         * @param tagsExclude Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags. Articles will be ordered by descending popularity. (optional)
         * @return ListPublishedArticlesRequestBuilder
         */
        public ListPublishedArticlesRequestBuilder tagsExclude(String tagsExclude) {
            this.tagsExclude = tagsExclude;
            return this;
        }
        
        /**
         * Set username
         * @param username Using this parameter will retrieve articles belonging             to a User or Organization ordered by descending publication date.             If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.             This parameter can be used in conjuction with &#x60;state&#x60;. (optional)
         * @return ListPublishedArticlesRequestBuilder
         */
        public ListPublishedArticlesRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set state
         * @param state Using this parameter will allow the client to check which articles are fresh or rising.             If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles.             If &#x60;state&#x3D;rising&#x60; the server will return rising articles.             This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;. (optional)
         * @return ListPublishedArticlesRequestBuilder
         */
        public ListPublishedArticlesRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set top
         * @param top Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days. &#x60;top&#x60; indicates the number of days since publication of the articles returned. This param can be used in conjuction with &#x60;tag&#x60;. (optional)
         * @return ListPublishedArticlesRequestBuilder
         */
        public ListPublishedArticlesRequestBuilder top(Integer top) {
            this.top = top;
            return this;
        }
        
        /**
         * Set collectionId
         * @param collectionId Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date. (optional)
         * @return ListPublishedArticlesRequestBuilder
         */
        public ListPublishedArticlesRequestBuilder collectionId(Integer collectionId) {
            this.collectionId = collectionId;
            return this;
        }
        
        /**
         * Build call for listPublishedArticles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of Articles </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPublishedArticlesCall(page, perPage, tag, tags, tagsExclude, username, state, top, collectionId, _callback);
        }


        /**
         * Execute listPublishedArticles request
         * @return List&lt;ArticleIndex&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of Articles </td><td>  -  </td></tr>
         </table>
         */
        public List<ArticleIndex> execute() throws ApiException {
            ApiResponse<List<ArticleIndex>> localVarResp = listPublishedArticlesWithHttpInfo(page, perPage, tag, tags, tagsExclude, username, state, top, collectionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPublishedArticles request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ArticleIndex&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of Articles </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ArticleIndex>> executeWithHttpInfo() throws ApiException {
            return listPublishedArticlesWithHttpInfo(page, perPage, tag, tags, tagsExclude, username, state, top, collectionId);
        }

        /**
         * Execute listPublishedArticles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of Articles </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ArticleIndex>> _callback) throws ApiException {
            return listPublishedArticlesAsync(page, perPage, tag, tags, tagsExclude, username, state, top, collectionId, _callback);
        }
    }

    /**
     * Published articles
     * This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default.
     * @return ListPublishedArticlesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of Articles </td><td>  -  </td></tr>
     </table>
     */
    public ListPublishedArticlesRequestBuilder listPublishedArticles() throws IllegalArgumentException {
        return new ListPublishedArticlesRequestBuilder();
    }
    private okhttp3.Call unpublishByIdCall(Integer id, String note, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/articles/{id}/unpublish"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (note != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("note", note));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpublishByIdValidateBeforeCall(Integer id, String note, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unpublishById(Async)");
        }

        return unpublishByIdCall(id, note, _callback);

    }


    private ApiResponse<Void> unpublishByIdWithHttpInfo(Integer id, String note) throws ApiException {
        okhttp3.Call localVarCall = unpublishByIdValidateBeforeCall(id, note, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unpublishByIdAsync(Integer id, String note, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpublishByIdValidateBeforeCall(id, note, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnpublishByIdRequestBuilder {
        private final Integer id;
        private String note;

        private UnpublishByIdRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set note
         * @param note Content for the note that&#39;s created along with unpublishing (optional)
         * @return UnpublishByIdRequestBuilder
         */
        public UnpublishByIdRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Build call for unpublishById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Article successfully unpublished </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unpublishByIdCall(id, note, _callback);
        }


        /**
         * Execute unpublishById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Article successfully unpublished </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unpublishByIdWithHttpInfo(id, note);
        }

        /**
         * Execute unpublishById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Article successfully unpublished </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unpublishByIdWithHttpInfo(id, note);
        }

        /**
         * Execute unpublishById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Article successfully unpublished </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unpublishByIdAsync(id, note, _callback);
        }
    }

    /**
     * Unpublish an article
     * This endpoint allows the client to unpublish an article.  The user associated with the API key must have any &#39;admin&#39; or &#39;moderator&#39; role.  The article will be unpublished and will no longer be visible to the public. It will remain in the database and will set back to draft status on the author&#39;s posts dashboard. Any notifications associated with the article will be deleted. Any comments on the article will remain.
     * @param id The ID of the article to unpublish. (required)
     * @return UnpublishByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Article successfully unpublished </td><td>  -  </td></tr>
     </table>
     */
    public UnpublishByIdRequestBuilder unpublishById(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UnpublishByIdRequestBuilder(id);
    }
    private okhttp3.Call updateByIdCall(Integer id, Article article, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = article;

        // create path and map variables
        String localVarPath = "/api/articles/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(Integer id, Article article, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateById(Async)");
        }

        return updateByIdCall(id, article, _callback);

    }


    private ApiResponse<ArticlesUpdateByIdResponse> updateByIdWithHttpInfo(Integer id, Article article) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, article, null);
        Type localVarReturnType = new TypeToken<ArticlesUpdateByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(Integer id, Article article, final ApiCallback<ArticlesUpdateByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, article, _callback);
        Type localVarReturnType = new TypeToken<ArticlesUpdateByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final Integer id;
        private ArticleArticle article;

        private UpdateByIdRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set article
         * @param article  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder article(ArticleArticle article) {
            this.article = article;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Article </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Article article = buildBodyParams();
            return updateByIdCall(id, article, _callback);
        }

        private Article buildBodyParams() {
            Article article = new Article();
            article.article(this.article);
            return article;
        }

        /**
         * Execute updateById request
         * @return ArticlesUpdateByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Article </td><td>  -  </td></tr>
         </table>
         */
        public ArticlesUpdateByIdResponse execute() throws ApiException {
            Article article = buildBodyParams();
            ApiResponse<ArticlesUpdateByIdResponse> localVarResp = updateByIdWithHttpInfo(id, article);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;ArticlesUpdateByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Article </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ArticlesUpdateByIdResponse> executeWithHttpInfo() throws ApiException {
            Article article = buildBodyParams();
            return updateByIdWithHttpInfo(id, article);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Article </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ArticlesUpdateByIdResponse> _callback) throws ApiException {
            Article article = buildBodyParams();
            return updateByIdAsync(id, article, _callback);
        }
    }

    /**
     * Update an article by id
     * This endpoint allows the client to update an existing article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     * @param id The ID of the user to unpublish. (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An Article </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateByIdRequestBuilder(id);
    }
}
