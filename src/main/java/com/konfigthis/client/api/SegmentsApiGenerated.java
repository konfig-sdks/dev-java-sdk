/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Segment;
import com.konfigthis.client.model.SegmentUserIds;
import com.konfigthis.client.model.SegmentsAddUsersToSegmentResponse;
import com.konfigthis.client.model.SegmentsCreateManuallyManagedSegmentResponse;
import com.konfigthis.client.model.SegmentsDeleteManuallyManagedSegmentResponse;
import com.konfigthis.client.model.SegmentsRemoveUsersFromSegmentResponse;
import com.konfigthis.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SegmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SegmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SegmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"api-key\" is required but no API key was provided. Please set \"api-key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addUsersToSegmentCall(Integer id, SegmentUserIds segmentUserIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = segmentUserIds;

        // create path and map variables
        String localVarPath = "/api/segments/{id}/add_users"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUsersToSegmentValidateBeforeCall(Integer id, SegmentUserIds segmentUserIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addUsersToSegment(Async)");
        }

        return addUsersToSegmentCall(id, segmentUserIds, _callback);

    }


    private ApiResponse<SegmentsAddUsersToSegmentResponse> addUsersToSegmentWithHttpInfo(Integer id, SegmentUserIds segmentUserIds) throws ApiException {
        okhttp3.Call localVarCall = addUsersToSegmentValidateBeforeCall(id, segmentUserIds, null);
        Type localVarReturnType = new TypeToken<SegmentsAddUsersToSegmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addUsersToSegmentAsync(Integer id, SegmentUserIds segmentUserIds, final ApiCallback<SegmentsAddUsersToSegmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUsersToSegmentValidateBeforeCall(id, segmentUserIds, _callback);
        Type localVarReturnType = new TypeToken<SegmentsAddUsersToSegmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddUsersToSegmentRequestBuilder {
        private final Integer id;
        private List<Integer> userIds;

        private AddUsersToSegmentRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set userIds
         * @param userIds  (optional)
         * @return AddUsersToSegmentRequestBuilder
         */
        public AddUsersToSegmentRequestBuilder userIds(List<Integer> userIds) {
            this.userIds = userIds;
            return this;
        }
        
        /**
         * Build call for addUsersToSegment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result of adding the users to the segment. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SegmentUserIds segmentUserIds = buildBodyParams();
            return addUsersToSegmentCall(id, segmentUserIds, _callback);
        }

        private SegmentUserIds buildBodyParams() {
            SegmentUserIds segmentUserIds = new SegmentUserIds();
            segmentUserIds.userIds(this.userIds);
            return segmentUserIds;
        }

        /**
         * Execute addUsersToSegment request
         * @return SegmentsAddUsersToSegmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result of adding the users to the segment. </td><td>  -  </td></tr>
         </table>
         */
        public SegmentsAddUsersToSegmentResponse execute() throws ApiException {
            SegmentUserIds segmentUserIds = buildBodyParams();
            ApiResponse<SegmentsAddUsersToSegmentResponse> localVarResp = addUsersToSegmentWithHttpInfo(id, segmentUserIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addUsersToSegment request with HTTP info returned
         * @return ApiResponse&lt;SegmentsAddUsersToSegmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result of adding the users to the segment. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SegmentsAddUsersToSegmentResponse> executeWithHttpInfo() throws ApiException {
            SegmentUserIds segmentUserIds = buildBodyParams();
            return addUsersToSegmentWithHttpInfo(id, segmentUserIds);
        }

        /**
         * Execute addUsersToSegment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result of adding the users to the segment. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SegmentsAddUsersToSegmentResponse> _callback) throws ApiException {
            SegmentUserIds segmentUserIds = buildBodyParams();
            return addUsersToSegmentAsync(id, segmentUserIds, _callback);
        }
    }

    /**
     * Add users to a manually managed audience segment
     * This endpoint allows the client to add users in bulk to an audience segment specified by ID.  Successes are users that were included in the segment (even if they were already in it), and failures are users that could not be added to the segment.
     * @param id  (required)
     * @return AddUsersToSegmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of adding the users to the segment. </td><td>  -  </td></tr>
     </table>
     */
    public AddUsersToSegmentRequestBuilder addUsersToSegment(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new AddUsersToSegmentRequestBuilder(id);
    }
    private okhttp3.Call createManuallyManagedSegmentCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/segments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createManuallyManagedSegmentValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createManuallyManagedSegmentCall(_callback);

    }


    private ApiResponse<SegmentsCreateManuallyManagedSegmentResponse> createManuallyManagedSegmentWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createManuallyManagedSegmentValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SegmentsCreateManuallyManagedSegmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createManuallyManagedSegmentAsync(final ApiCallback<SegmentsCreateManuallyManagedSegmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createManuallyManagedSegmentValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SegmentsCreateManuallyManagedSegmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateManuallyManagedSegmentRequestBuilder {

        private CreateManuallyManagedSegmentRequestBuilder() {
        }

        /**
         * Build call for createManuallyManagedSegment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A manually managed audience segment </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createManuallyManagedSegmentCall(_callback);
        }


        /**
         * Execute createManuallyManagedSegment request
         * @return SegmentsCreateManuallyManagedSegmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A manually managed audience segment </td><td>  -  </td></tr>
         </table>
         */
        public SegmentsCreateManuallyManagedSegmentResponse execute() throws ApiException {
            ApiResponse<SegmentsCreateManuallyManagedSegmentResponse> localVarResp = createManuallyManagedSegmentWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createManuallyManagedSegment request with HTTP info returned
         * @return ApiResponse&lt;SegmentsCreateManuallyManagedSegmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A manually managed audience segment </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SegmentsCreateManuallyManagedSegmentResponse> executeWithHttpInfo() throws ApiException {
            return createManuallyManagedSegmentWithHttpInfo();
        }

        /**
         * Execute createManuallyManagedSegment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A manually managed audience segment </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SegmentsCreateManuallyManagedSegmentResponse> _callback) throws ApiException {
            return createManuallyManagedSegmentAsync(_callback);
        }
    }

    /**
     * Create a manually managed audience segment
     * This endpoint allows the client to create a new audience segment.  An audience segment is a group of users that can be targeted by a Billboard. This API only permits managing segments you create and maintain yourself.
     * @return CreateManuallyManagedSegmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A manually managed audience segment </td><td>  -  </td></tr>
     </table>
     */
    public CreateManuallyManagedSegmentRequestBuilder createManuallyManagedSegment() throws IllegalArgumentException {
        return new CreateManuallyManagedSegmentRequestBuilder();
    }
    private okhttp3.Call deleteManuallyManagedSegmentCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/segments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteManuallyManagedSegmentValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteManuallyManagedSegment(Async)");
        }

        return deleteManuallyManagedSegmentCall(id, _callback);

    }


    private ApiResponse<SegmentsDeleteManuallyManagedSegmentResponse> deleteManuallyManagedSegmentWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteManuallyManagedSegmentValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SegmentsDeleteManuallyManagedSegmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteManuallyManagedSegmentAsync(Integer id, final ApiCallback<SegmentsDeleteManuallyManagedSegmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteManuallyManagedSegmentValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SegmentsDeleteManuallyManagedSegmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteManuallyManagedSegmentRequestBuilder {
        private final Integer id;

        private DeleteManuallyManagedSegmentRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for deleteManuallyManagedSegment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted audience segment </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteManuallyManagedSegmentCall(id, _callback);
        }


        /**
         * Execute deleteManuallyManagedSegment request
         * @return SegmentsDeleteManuallyManagedSegmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted audience segment </td><td>  -  </td></tr>
         </table>
         */
        public SegmentsDeleteManuallyManagedSegmentResponse execute() throws ApiException {
            ApiResponse<SegmentsDeleteManuallyManagedSegmentResponse> localVarResp = deleteManuallyManagedSegmentWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteManuallyManagedSegment request with HTTP info returned
         * @return ApiResponse&lt;SegmentsDeleteManuallyManagedSegmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted audience segment </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SegmentsDeleteManuallyManagedSegmentResponse> executeWithHttpInfo() throws ApiException {
            return deleteManuallyManagedSegmentWithHttpInfo(id);
        }

        /**
         * Execute deleteManuallyManagedSegment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The deleted audience segment </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SegmentsDeleteManuallyManagedSegmentResponse> _callback) throws ApiException {
            return deleteManuallyManagedSegmentAsync(id, _callback);
        }
    }

    /**
     * Delete a manually managed audience segment
     * This endpoint allows the client to delete an audience segment specified by ID.  Audience segments cannot be deleted if there are still any Billboards using them.
     * @param id  (required)
     * @return DeleteManuallyManagedSegmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted audience segment </td><td>  -  </td></tr>
     </table>
     */
    public DeleteManuallyManagedSegmentRequestBuilder deleteManuallyManagedSegment(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteManuallyManagedSegmentRequestBuilder(id);
    }
    private okhttp3.Call getByIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/segments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<List<Segment>> getByIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Segment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(Integer id, final ApiCallback<List<Segment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Segment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final Integer id;

        private GetByIdRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The audience segment </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return List&lt;Segment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The audience segment </td><td>  -  </td></tr>
         </table>
         */
        public List<Segment> execute() throws ApiException {
            ApiResponse<List<Segment>> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Segment&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The audience segment </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Segment>> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The audience segment </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Segment>> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * A manually managed audience segment
     * This endpoint allows the client to retrieve a single manually-managed audience segment specified by ID.
     * @param id  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The audience segment </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call getUserListInSegmentCall(Integer id, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/segments/{id}/users"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserListInSegmentValidateBeforeCall(Integer id, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserListInSegment(Async)");
        }

        return getUserListInSegmentCall(id, perPage, _callback);

    }


    private ApiResponse<List<User>> getUserListInSegmentWithHttpInfo(Integer id, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getUserListInSegmentValidateBeforeCall(id, perPage, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserListInSegmentAsync(Integer id, Integer perPage, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserListInSegmentValidateBeforeCall(id, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserListInSegmentRequestBuilder {
        private final Integer id;
        private Integer perPage;

        private GetUserListInSegmentRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set perPage
         * @param perPage Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)
         * @return GetUserListInSegmentRequestBuilder
         */
        public GetUserListInSegmentRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getUserListInSegment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of users in the audience segment </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserListInSegmentCall(id, perPage, _callback);
        }


        /**
         * Execute getUserListInSegment request
         * @return List&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of users in the audience segment </td><td>  -  </td></tr>
         </table>
         */
        public List<User> execute() throws ApiException {
            ApiResponse<List<User>> localVarResp = getUserListInSegmentWithHttpInfo(id, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserListInSegment request with HTTP info returned
         * @return ApiResponse&lt;List&lt;User&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of users in the audience segment </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<User>> executeWithHttpInfo() throws ApiException {
            return getUserListInSegmentWithHttpInfo(id, perPage);
        }

        /**
         * Execute getUserListInSegment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of users in the audience segment </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<User>> _callback) throws ApiException {
            return getUserListInSegmentAsync(id, perPage, _callback);
        }
    }

    /**
     * Users in a manually managed audience segment
     * This endpoint allows the client to retrieve a list of the users in an audience segment specified by ID. The endpoint supports pagination, and each page will contain &#x60;30&#x60; users by default.
     * @param id  (required)
     * @return GetUserListInSegmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of users in the audience segment </td><td>  -  </td></tr>
     </table>
     */
    public GetUserListInSegmentRequestBuilder getUserListInSegment(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetUserListInSegmentRequestBuilder(id);
    }
    private okhttp3.Call listAudienceSegmentsCall(Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/segments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAudienceSegmentsValidateBeforeCall(Integer perPage, final ApiCallback _callback) throws ApiException {
        return listAudienceSegmentsCall(perPage, _callback);

    }


    private ApiResponse<List<Segment>> listAudienceSegmentsWithHttpInfo(Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listAudienceSegmentsValidateBeforeCall(perPage, null);
        Type localVarReturnType = new TypeToken<List<Segment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAudienceSegmentsAsync(Integer perPage, final ApiCallback<List<Segment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAudienceSegmentsValidateBeforeCall(perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Segment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAudienceSegmentsRequestBuilder {
        private Integer perPage;

        private ListAudienceSegmentsRequestBuilder() {
        }

        /**
         * Set perPage
         * @param perPage Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)
         * @return ListAudienceSegmentsRequestBuilder
         */
        public ListAudienceSegmentsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listAudienceSegments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of manually managed audience segments </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAudienceSegmentsCall(perPage, _callback);
        }


        /**
         * Execute listAudienceSegments request
         * @return List&lt;Segment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of manually managed audience segments </td><td>  -  </td></tr>
         </table>
         */
        public List<Segment> execute() throws ApiException {
            ApiResponse<List<Segment>> localVarResp = listAudienceSegmentsWithHttpInfo(perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAudienceSegments request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Segment&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of manually managed audience segments </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Segment>> executeWithHttpInfo() throws ApiException {
            return listAudienceSegmentsWithHttpInfo(perPage);
        }

        /**
         * Execute listAudienceSegments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of manually managed audience segments </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Segment>> _callback) throws ApiException {
            return listAudienceSegmentsAsync(perPage, _callback);
        }
    }

    /**
     * Manually managed audience segments
     * This endpoint allows the client to retrieve a list of audience segments.  An audience segment is a group of users that can be targeted by a Billboard. This API only permits managing segments you create and maintain yourself.  The endpoint supports pagination, and each page will contain &#x60;30&#x60; segments by default.
     * @return ListAudienceSegmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of manually managed audience segments </td><td>  -  </td></tr>
     </table>
     */
    public ListAudienceSegmentsRequestBuilder listAudienceSegments() throws IllegalArgumentException {
        return new ListAudienceSegmentsRequestBuilder();
    }
    private okhttp3.Call removeUsersFromSegmentCall(Integer id, SegmentUserIds segmentUserIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = segmentUserIds;

        // create path and map variables
        String localVarPath = "/api/segments/{id}/remove_users"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUsersFromSegmentValidateBeforeCall(Integer id, SegmentUserIds segmentUserIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeUsersFromSegment(Async)");
        }

        return removeUsersFromSegmentCall(id, segmentUserIds, _callback);

    }


    private ApiResponse<SegmentsRemoveUsersFromSegmentResponse> removeUsersFromSegmentWithHttpInfo(Integer id, SegmentUserIds segmentUserIds) throws ApiException {
        okhttp3.Call localVarCall = removeUsersFromSegmentValidateBeforeCall(id, segmentUserIds, null);
        Type localVarReturnType = new TypeToken<SegmentsRemoveUsersFromSegmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeUsersFromSegmentAsync(Integer id, SegmentUserIds segmentUserIds, final ApiCallback<SegmentsRemoveUsersFromSegmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUsersFromSegmentValidateBeforeCall(id, segmentUserIds, _callback);
        Type localVarReturnType = new TypeToken<SegmentsRemoveUsersFromSegmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveUsersFromSegmentRequestBuilder {
        private final Integer id;
        private List<Integer> userIds;

        private RemoveUsersFromSegmentRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set userIds
         * @param userIds  (optional)
         * @return RemoveUsersFromSegmentRequestBuilder
         */
        public RemoveUsersFromSegmentRequestBuilder userIds(List<Integer> userIds) {
            this.userIds = userIds;
            return this;
        }
        
        /**
         * Build call for removeUsersFromSegment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result of removing the users to the segment. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SegmentUserIds segmentUserIds = buildBodyParams();
            return removeUsersFromSegmentCall(id, segmentUserIds, _callback);
        }

        private SegmentUserIds buildBodyParams() {
            SegmentUserIds segmentUserIds = new SegmentUserIds();
            segmentUserIds.userIds(this.userIds);
            return segmentUserIds;
        }

        /**
         * Execute removeUsersFromSegment request
         * @return SegmentsRemoveUsersFromSegmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result of removing the users to the segment. </td><td>  -  </td></tr>
         </table>
         */
        public SegmentsRemoveUsersFromSegmentResponse execute() throws ApiException {
            SegmentUserIds segmentUserIds = buildBodyParams();
            ApiResponse<SegmentsRemoveUsersFromSegmentResponse> localVarResp = removeUsersFromSegmentWithHttpInfo(id, segmentUserIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeUsersFromSegment request with HTTP info returned
         * @return ApiResponse&lt;SegmentsRemoveUsersFromSegmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result of removing the users to the segment. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SegmentsRemoveUsersFromSegmentResponse> executeWithHttpInfo() throws ApiException {
            SegmentUserIds segmentUserIds = buildBodyParams();
            return removeUsersFromSegmentWithHttpInfo(id, segmentUserIds);
        }

        /**
         * Execute removeUsersFromSegment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result of removing the users to the segment. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SegmentsRemoveUsersFromSegmentResponse> _callback) throws ApiException {
            SegmentUserIds segmentUserIds = buildBodyParams();
            return removeUsersFromSegmentAsync(id, segmentUserIds, _callback);
        }
    }

    /**
     * Remove users from a manually managed audience segment
     * This endpoint allows the client to remove users in bulk from an audience segment specified by ID.  Successes are users that were removed; failures are users that weren&#39;t a part of the segment.
     * @param id  (required)
     * @return RemoveUsersFromSegmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of removing the users to the segment. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveUsersFromSegmentRequestBuilder removeUsersFromSegment(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new RemoveUsersFromSegmentRequestBuilder(id);
    }
}
