/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PodcastEpisodeIndex;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PodcastEpisodesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PodcastEpisodesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PodcastEpisodesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"api-key\" is required but no API key was provided. Please set \"api-key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listByDescendingPublicationDateCall(Integer page, Integer perPage, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/podcast_episodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByDescendingPublicationDateValidateBeforeCall(Integer page, Integer perPage, String username, final ApiCallback _callback) throws ApiException {
        return listByDescendingPublicationDateCall(page, perPage, username, _callback);

    }


    private ApiResponse<List<PodcastEpisodeIndex>> listByDescendingPublicationDateWithHttpInfo(Integer page, Integer perPage, String username) throws ApiException {
        okhttp3.Call localVarCall = listByDescendingPublicationDateValidateBeforeCall(page, perPage, username, null);
        Type localVarReturnType = new TypeToken<List<PodcastEpisodeIndex>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByDescendingPublicationDateAsync(Integer page, Integer perPage, String username, final ApiCallback<List<PodcastEpisodeIndex>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByDescendingPublicationDateValidateBeforeCall(page, perPage, username, _callback);
        Type localVarReturnType = new TypeToken<List<PodcastEpisodeIndex>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByDescendingPublicationDateRequestBuilder {
        private Integer page;
        private Integer perPage;
        private String username;

        private ListByDescendingPublicationDateRequestBuilder() {
        }

        /**
         * Set page
         * @param page Pagination page (optional, default to 1)
         * @return ListByDescendingPublicationDateRequestBuilder
         */
        public ListByDescendingPublicationDateRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)
         * @return ListByDescendingPublicationDateRequestBuilder
         */
        public ListByDescendingPublicationDateRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set username
         * @param username Using this parameter will retrieve episodes belonging to a specific podcast. (optional)
         * @return ListByDescendingPublicationDateRequestBuilder
         */
        public ListByDescendingPublicationDateRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Build call for listByDescendingPublicationDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of Podcast episodes filtered by username </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByDescendingPublicationDateCall(page, perPage, username, _callback);
        }


        /**
         * Execute listByDescendingPublicationDate request
         * @return List&lt;PodcastEpisodeIndex&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of Podcast episodes filtered by username </td><td>  -  </td></tr>
         </table>
         */
        public List<PodcastEpisodeIndex> execute() throws ApiException {
            ApiResponse<List<PodcastEpisodeIndex>> localVarResp = listByDescendingPublicationDateWithHttpInfo(page, perPage, username);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByDescendingPublicationDate request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PodcastEpisodeIndex&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of Podcast episodes filtered by username </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PodcastEpisodeIndex>> executeWithHttpInfo() throws ApiException {
            return listByDescendingPublicationDateWithHttpInfo(page, perPage, username);
        }

        /**
         * Execute listByDescendingPublicationDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A List of Podcast episodes filtered by username </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PodcastEpisodeIndex>> _callback) throws ApiException {
            return listByDescendingPublicationDateAsync(page, perPage, username, _callback);
        }
    }

    /**
     * Podcast Episodes
     * This endpoint allows the client to retrieve a list of podcast episodes.         \&quot;Podcast episodes\&quot; are episodes belonging to podcasts.         It will only return active (reachable) podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.         It supports pagination, each page will contain 30 articles by default.
     * @return ListByDescendingPublicationDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of Podcast episodes filtered by username </td><td>  -  </td></tr>
     </table>
     */
    public ListByDescendingPublicationDateRequestBuilder listByDescendingPublicationDate() throws IllegalArgumentException {
        return new ListByDescendingPublicationDateRequestBuilder();
    }
}
