/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Billboard, aka Widget, ex. Display Ad
 */
@ApiModel(description = "Billboard, aka Widget, ex. Display Ad")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Billboard {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_BODY_MARKDOWN = "body_markdown";
  @SerializedName(SERIALIZED_NAME_BODY_MARKDOWN)
  private String bodyMarkdown;

  public static final String SERIALIZED_NAME_APPROVED = "approved";
  @SerializedName(SERIALIZED_NAME_APPROVED)
  private Boolean approved;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private Boolean published;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organization_id";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private Integer organizationId;

  public static final String SERIALIZED_NAME_CREATOR_ID = "creator_id";
  @SerializedName(SERIALIZED_NAME_CREATOR_ID)
  private Integer creatorId;

  /**
   * Identifies which area of site layout the ad can appear in
   */
  @JsonAdapter(PlacementAreaEnum.Adapter.class)
 public enum PlacementAreaEnum {
    SIDEBAR_LEFT("sidebar_left"),
    
    SIDEBAR_LEFT_2("sidebar_left_2"),
    
    SIDEBAR_RIGHT("sidebar_right"),
    
    FEED_FIRST("feed_first"),
    
    FEED_SECOND("feed_second"),
    
    FEED_THIRD("feed_third"),
    
    HOME_HERO("home_hero"),
    
    POST_SIDEBAR("post_sidebar"),
    
    POST_COMMENTS("post_comments");

    private String value;

    PlacementAreaEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlacementAreaEnum fromValue(String value) {
      for (PlacementAreaEnum b : PlacementAreaEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlacementAreaEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlacementAreaEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlacementAreaEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlacementAreaEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PLACEMENT_AREA = "placement_area";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_AREA)
  private PlacementAreaEnum placementArea;

  public static final String SERIALIZED_NAME_TAG_LIST = "tag_list";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private String tagList;

  public static final String SERIALIZED_NAME_EXCLUDE_ARTICLE_IDS = "exclude_article_ids";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_ARTICLE_IDS)
  private String excludeArticleIds;

  public static final String SERIALIZED_NAME_AUDIENCE_SEGMENT_ID = "audience_segment_id";
  @SerializedName(SERIALIZED_NAME_AUDIENCE_SEGMENT_ID)
  private Integer audienceSegmentId;

  /**
   * Specifies a group of users who will see this billboard (must match audience_segment_id if both provided)
   */
  @JsonAdapter(AudienceSegmentTypeEnum.Adapter.class)
 public enum AudienceSegmentTypeEnum {
    MANUAL("manual"),
    
    TRUSTED("trusted"),
    
    POSTED("posted"),
    
    NO_POSTS_YET("no_posts_yet"),
    
    DARK_THEME("dark_theme"),
    
    LIGHT_THEME("light_theme"),
    
    NO_EXPERIENCE("no_experience"),
    
    EXPERIENCE1("experience1"),
    
    EXPERIENCE2("experience2"),
    
    EXPERIENCE3("experience3"),
    
    EXPERIENCE4("experience4"),
    
    EXPERIENCE5("experience5");

    private String value;

    AudienceSegmentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudienceSegmentTypeEnum fromValue(String value) {
      for (AudienceSegmentTypeEnum b : AudienceSegmentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AudienceSegmentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudienceSegmentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudienceSegmentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AudienceSegmentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUDIENCE_SEGMENT_TYPE = "audience_segment_type";
  @SerializedName(SERIALIZED_NAME_AUDIENCE_SEGMENT_TYPE)
  private AudienceSegmentTypeEnum audienceSegmentType;

  public static final String SERIALIZED_NAME_TARGET_GEOLOCATIONS = "target_geolocations";
  @SerializedName(SERIALIZED_NAME_TARGET_GEOLOCATIONS)
  private List<String> targetGeolocations = null;

  /**
   * Potentially limits visitors to whom the ad is visible
   */
  @JsonAdapter(DisplayToEnum.Adapter.class)
 public enum DisplayToEnum {
    ALL("all"),
    
    LOGGED_IN("logged_in"),
    
    LOGGED_OUT("logged_out");

    private String value;

    DisplayToEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisplayToEnum fromValue(String value) {
      for (DisplayToEnum b : DisplayToEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisplayToEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisplayToEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisplayToEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisplayToEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DISPLAY_TO = "display_to";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TO)
  private DisplayToEnum displayTo = DisplayToEnum.ALL;

  /**
   * Types of the billboards: in_house (created by admins), community (created by an entity, appears on entity&#39;s content), external ( created by an entity, or a non-entity, can appear everywhere) 
   */
  @JsonAdapter(TypeOfEnum.Adapter.class)
 public enum TypeOfEnum {
    IN_HOUSE("in_house"),
    
    COMMUNITY("community"),
    
    EXTERNAL("external");

    private String value;

    TypeOfEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeOfEnum fromValue(String value) {
      for (TypeOfEnum b : TypeOfEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeOfEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeOfEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeOfEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeOfEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE_OF = "type_of";
  @SerializedName(SERIALIZED_NAME_TYPE_OF)
  private TypeOfEnum typeOf = TypeOfEnum.IN_HOUSE;

  public Billboard() {
  }

  public Billboard id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the Billboard
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the Billboard")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public Billboard name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * For internal use, helps distinguish ads from one another
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "For internal use, helps distinguish ads from one another")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Billboard bodyMarkdown(String bodyMarkdown) {
    
    
    
    
    this.bodyMarkdown = bodyMarkdown;
    return this;
  }

   /**
   * The text (in markdown) of the ad (required)
   * @return bodyMarkdown
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The text (in markdown) of the ad (required)")

  public String getBodyMarkdown() {
    return bodyMarkdown;
  }


  public void setBodyMarkdown(String bodyMarkdown) {
    
    
    
    this.bodyMarkdown = bodyMarkdown;
  }


  public Billboard approved(Boolean approved) {
    
    
    
    
    this.approved = approved;
    return this;
  }

   /**
   * Ad must be both published and approved to be in rotation
   * @return approved
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ad must be both published and approved to be in rotation")

  public Boolean getApproved() {
    return approved;
  }


  public void setApproved(Boolean approved) {
    
    
    
    this.approved = approved;
  }


  public Billboard published(Boolean published) {
    
    
    
    
    this.published = published;
    return this;
  }

   /**
   * Ad must be both published and approved to be in rotation
   * @return published
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ad must be both published and approved to be in rotation")

  public Boolean getPublished() {
    return published;
  }


  public void setPublished(Boolean published) {
    
    
    
    this.published = published;
  }


  public Billboard organizationId(Integer organizationId) {
    
    
    
    
    this.organizationId = organizationId;
    return this;
  }

   /**
   * Identifies the organization to which the ad belongs
   * @return organizationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies the organization to which the ad belongs")

  public Integer getOrganizationId() {
    return organizationId;
  }


  public void setOrganizationId(Integer organizationId) {
    
    
    
    this.organizationId = organizationId;
  }


  public Billboard creatorId(Integer creatorId) {
    
    
    
    
    this.creatorId = creatorId;
    return this;
  }

   /**
   * Identifies the user who created the ad.
   * @return creatorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies the user who created the ad.")

  public Integer getCreatorId() {
    return creatorId;
  }


  public void setCreatorId(Integer creatorId) {
    
    
    
    this.creatorId = creatorId;
  }


  public Billboard placementArea(PlacementAreaEnum placementArea) {
    
    
    
    
    this.placementArea = placementArea;
    return this;
  }

   /**
   * Identifies which area of site layout the ad can appear in
   * @return placementArea
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Identifies which area of site layout the ad can appear in")

  public PlacementAreaEnum getPlacementArea() {
    return placementArea;
  }


  public void setPlacementArea(PlacementAreaEnum placementArea) {
    
    
    
    this.placementArea = placementArea;
  }


  public Billboard tagList(String tagList) {
    
    
    
    
    this.tagList = tagList;
    return this;
  }

   /**
   * Tags on which this ad can be displayed (blank is all/any tags)
   * @return tagList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tags on which this ad can be displayed (blank is all/any tags)")

  public String getTagList() {
    return tagList;
  }


  public void setTagList(String tagList) {
    
    
    
    this.tagList = tagList;
  }


  public Billboard excludeArticleIds(String excludeArticleIds) {
    
    
    
    
    this.excludeArticleIds = excludeArticleIds;
    return this;
  }

   /**
   * Articles this ad should *not* appear on (blank means no articles are disallowed, and this ad can appear next to any/all articles). Comma-separated list of integer Article IDs
   * @return excludeArticleIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Articles this ad should *not* appear on (blank means no articles are disallowed, and this ad can appear next to any/all articles). Comma-separated list of integer Article IDs")

  public String getExcludeArticleIds() {
    return excludeArticleIds;
  }


  public void setExcludeArticleIds(String excludeArticleIds) {
    
    
    
    this.excludeArticleIds = excludeArticleIds;
  }


  public Billboard audienceSegmentId(Integer audienceSegmentId) {
    
    
    
    
    this.audienceSegmentId = audienceSegmentId;
    return this;
  }

   /**
   * Specifies a specific audience segment who will see this billboard
   * @return audienceSegmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a specific audience segment who will see this billboard")

  public Integer getAudienceSegmentId() {
    return audienceSegmentId;
  }


  public void setAudienceSegmentId(Integer audienceSegmentId) {
    
    
    
    this.audienceSegmentId = audienceSegmentId;
  }


  public Billboard audienceSegmentType(AudienceSegmentTypeEnum audienceSegmentType) {
    
    
    
    
    this.audienceSegmentType = audienceSegmentType;
    return this;
  }

   /**
   * Specifies a group of users who will see this billboard (must match audience_segment_id if both provided)
   * @return audienceSegmentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a group of users who will see this billboard (must match audience_segment_id if both provided)")

  public AudienceSegmentTypeEnum getAudienceSegmentType() {
    return audienceSegmentType;
  }


  public void setAudienceSegmentType(AudienceSegmentTypeEnum audienceSegmentType) {
    
    
    
    this.audienceSegmentType = audienceSegmentType;
  }


  public Billboard targetGeolocations(List<String> targetGeolocations) {
    
    
    
    
    this.targetGeolocations = targetGeolocations;
    return this;
  }

  public Billboard addTargetGeolocationsItem(String targetGeolocationsItem) {
    if (this.targetGeolocations == null) {
      this.targetGeolocations = new ArrayList<>();
    }
    this.targetGeolocations.add(targetGeolocationsItem);
    return this;
  }

   /**
   * Locations to show this billboard in (blank means it will be shown in all locations). Specified as a comma-separated list or array of ISO 3166-2 country and optionally region codes)
   * @return targetGeolocations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Locations to show this billboard in (blank means it will be shown in all locations). Specified as a comma-separated list or array of ISO 3166-2 country and optionally region codes)")

  public List<String> getTargetGeolocations() {
    return targetGeolocations;
  }


  public void setTargetGeolocations(List<String> targetGeolocations) {
    
    
    
    this.targetGeolocations = targetGeolocations;
  }


  public Billboard displayTo(DisplayToEnum displayTo) {
    
    
    
    
    this.displayTo = displayTo;
    return this;
  }

   /**
   * Potentially limits visitors to whom the ad is visible
   * @return displayTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ALL", value = "Potentially limits visitors to whom the ad is visible")

  public DisplayToEnum getDisplayTo() {
    return displayTo;
  }


  public void setDisplayTo(DisplayToEnum displayTo) {
    
    
    
    this.displayTo = displayTo;
  }


  public Billboard typeOf(TypeOfEnum typeOf) {
    
    
    
    
    this.typeOf = typeOf;
    return this;
  }

   /**
   * Types of the billboards: in_house (created by admins), community (created by an entity, appears on entity&#39;s content), external ( created by an entity, or a non-entity, can appear everywhere) 
   * @return typeOf
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "IN_HOUSE", value = "Types of the billboards: in_house (created by admins), community (created by an entity, appears on entity's content), external ( created by an entity, or a non-entity, can appear everywhere) ")

  public TypeOfEnum getTypeOf() {
    return typeOf;
  }


  public void setTypeOf(TypeOfEnum typeOf) {
    
    
    
    this.typeOf = typeOf;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Billboard instance itself
   */
  public Billboard putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Billboard billboard = (Billboard) o;
    return Objects.equals(this.id, billboard.id) &&
        Objects.equals(this.name, billboard.name) &&
        Objects.equals(this.bodyMarkdown, billboard.bodyMarkdown) &&
        Objects.equals(this.approved, billboard.approved) &&
        Objects.equals(this.published, billboard.published) &&
        Objects.equals(this.organizationId, billboard.organizationId) &&
        Objects.equals(this.creatorId, billboard.creatorId) &&
        Objects.equals(this.placementArea, billboard.placementArea) &&
        Objects.equals(this.tagList, billboard.tagList) &&
        Objects.equals(this.excludeArticleIds, billboard.excludeArticleIds) &&
        Objects.equals(this.audienceSegmentId, billboard.audienceSegmentId) &&
        Objects.equals(this.audienceSegmentType, billboard.audienceSegmentType) &&
        Objects.equals(this.targetGeolocations, billboard.targetGeolocations) &&
        Objects.equals(this.displayTo, billboard.displayTo) &&
        Objects.equals(this.typeOf, billboard.typeOf)&&
        Objects.equals(this.additionalProperties, billboard.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, bodyMarkdown, approved, published, organizationId, creatorId, placementArea, tagList, excludeArticleIds, audienceSegmentId, audienceSegmentType, targetGeolocations, displayTo, typeOf, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Billboard {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    bodyMarkdown: ").append(toIndentedString(bodyMarkdown)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    placementArea: ").append(toIndentedString(placementArea)).append("\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    excludeArticleIds: ").append(toIndentedString(excludeArticleIds)).append("\n");
    sb.append("    audienceSegmentId: ").append(toIndentedString(audienceSegmentId)).append("\n");
    sb.append("    audienceSegmentType: ").append(toIndentedString(audienceSegmentType)).append("\n");
    sb.append("    targetGeolocations: ").append(toIndentedString(targetGeolocations)).append("\n");
    sb.append("    displayTo: ").append(toIndentedString(displayTo)).append("\n");
    sb.append("    typeOf: ").append(toIndentedString(typeOf)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("body_markdown");
    openapiFields.add("approved");
    openapiFields.add("published");
    openapiFields.add("organization_id");
    openapiFields.add("creator_id");
    openapiFields.add("placement_area");
    openapiFields.add("tag_list");
    openapiFields.add("exclude_article_ids");
    openapiFields.add("audience_segment_id");
    openapiFields.add("audience_segment_type");
    openapiFields.add("target_geolocations");
    openapiFields.add("display_to");
    openapiFields.add("type_of");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("body_markdown");
    openapiRequiredFields.add("placement_area");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Billboard
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Billboard.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Billboard is not found in the empty JSON string", Billboard.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Billboard.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("body_markdown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_markdown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_markdown").toString()));
      }
      if (!jsonObj.get("placement_area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placement_area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placement_area").toString()));
      }
      if ((jsonObj.get("tag_list") != null && !jsonObj.get("tag_list").isJsonNull()) && !jsonObj.get("tag_list").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_list` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_list").toString()));
      }
      if (!jsonObj.get("exclude_article_ids").isJsonNull() && (jsonObj.get("exclude_article_ids") != null && !jsonObj.get("exclude_article_ids").isJsonNull()) && !jsonObj.get("exclude_article_ids").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclude_article_ids` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exclude_article_ids").toString()));
      }
      if ((jsonObj.get("audience_segment_type") != null && !jsonObj.get("audience_segment_type").isJsonNull()) && !jsonObj.get("audience_segment_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audience_segment_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audience_segment_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("target_geolocations") != null && !jsonObj.get("target_geolocations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_geolocations` to be an array in the JSON string but got `%s`", jsonObj.get("target_geolocations").toString()));
      }
      if ((jsonObj.get("display_to") != null && !jsonObj.get("display_to").isJsonNull()) && !jsonObj.get("display_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_to").toString()));
      }
      if ((jsonObj.get("type_of") != null && !jsonObj.get("type_of").isJsonNull()) && !jsonObj.get("type_of").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_of` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_of").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Billboard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Billboard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Billboard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Billboard.class));

       return (TypeAdapter<T>) new TypeAdapter<Billboard>() {
           @Override
           public void write(JsonWriter out, Billboard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Billboard read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Billboard instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Billboard given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Billboard
  * @throws IOException if the JSON string is invalid with respect to Billboard
  */
  public static Billboard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Billboard.class);
  }

 /**
  * Convert an instance of Billboard to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

