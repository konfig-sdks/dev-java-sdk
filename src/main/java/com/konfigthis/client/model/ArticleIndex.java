/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ArticleFlareTag;
import com.konfigthis.client.model.SharedOrganization;
import com.konfigthis.client.model.SharedUser;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Representation of an article or post returned in a list
 */
@ApiModel(description = "Representation of an article or post returned in a list")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ArticleIndex {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TYPE_OF = "type_of";
  @SerializedName(SERIALIZED_NAME_TYPE_OF)
  private String typeOf;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_COVER_IMAGE = "cover_image";
  @SerializedName(SERIALIZED_NAME_COVER_IMAGE)
  private String coverImage;

  public static final String SERIALIZED_NAME_READABLE_PUBLISH_DATE = "readable_publish_date";
  @SerializedName(SERIALIZED_NAME_READABLE_PUBLISH_DATE)
  private String readablePublishDate;

  public static final String SERIALIZED_NAME_SOCIAL_IMAGE = "social_image";
  @SerializedName(SERIALIZED_NAME_SOCIAL_IMAGE)
  private String socialImage;

  public static final String SERIALIZED_NAME_TAG_LIST = "tag_list";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private List<String> tagList = new ArrayList<>();

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_CANONICAL_URL = "canonical_url";
  @SerializedName(SERIALIZED_NAME_CANONICAL_URL)
  private String canonicalUrl;

  public static final String SERIALIZED_NAME_POSITIVE_REACTIONS_COUNT = "positive_reactions_count";
  @SerializedName(SERIALIZED_NAME_POSITIVE_REACTIONS_COUNT)
  private Integer positiveReactionsCount;

  public static final String SERIALIZED_NAME_PUBLIC_REACTIONS_COUNT = "public_reactions_count";
  @SerializedName(SERIALIZED_NAME_PUBLIC_REACTIONS_COUNT)
  private Integer publicReactionsCount;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EDITED_AT = "edited_at";
  @SerializedName(SERIALIZED_NAME_EDITED_AT)
  private OffsetDateTime editedAt;

  public static final String SERIALIZED_NAME_CROSSPOSTED_AT = "crossposted_at";
  @SerializedName(SERIALIZED_NAME_CROSSPOSTED_AT)
  private OffsetDateTime crosspostedAt;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "published_at";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private OffsetDateTime publishedAt;

  public static final String SERIALIZED_NAME_LAST_COMMENT_AT = "last_comment_at";
  @SerializedName(SERIALIZED_NAME_LAST_COMMENT_AT)
  private OffsetDateTime lastCommentAt;

  public static final String SERIALIZED_NAME_PUBLISHED_TIMESTAMP = "published_timestamp";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_TIMESTAMP)
  private OffsetDateTime publishedTimestamp;

  public static final String SERIALIZED_NAME_READING_TIME_MINUTES = "reading_time_minutes";
  @SerializedName(SERIALIZED_NAME_READING_TIME_MINUTES)
  private Integer readingTimeMinutes;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private SharedUser user;

  public static final String SERIALIZED_NAME_FLARE_TAG = "flare_tag";
  @SerializedName(SERIALIZED_NAME_FLARE_TAG)
  private ArticleFlareTag flareTag;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private SharedOrganization organization;

  public ArticleIndex() {
  }

  public ArticleIndex tags(String tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getTags() {
    return tags;
  }


  public void setTags(String tags) {
    
    
    
    this.tags = tags;
  }


  public ArticleIndex title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public ArticleIndex description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ArticleIndex typeOf(String typeOf) {
    
    
    
    
    this.typeOf = typeOf;
    return this;
  }

   /**
   * Get typeOf
   * @return typeOf
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getTypeOf() {
    return typeOf;
  }


  public void setTypeOf(String typeOf) {
    
    
    
    this.typeOf = typeOf;
  }


  public ArticleIndex id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public ArticleIndex coverImage(String coverImage) {
    
    
    
    
    this.coverImage = coverImage;
    return this;
  }

   /**
   * Get coverImage
   * @return coverImage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getCoverImage() {
    return coverImage;
  }


  public void setCoverImage(String coverImage) {
    
    
    
    this.coverImage = coverImage;
  }


  public ArticleIndex readablePublishDate(String readablePublishDate) {
    
    
    
    
    this.readablePublishDate = readablePublishDate;
    return this;
  }

   /**
   * Get readablePublishDate
   * @return readablePublishDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getReadablePublishDate() {
    return readablePublishDate;
  }


  public void setReadablePublishDate(String readablePublishDate) {
    
    
    
    this.readablePublishDate = readablePublishDate;
  }


  public ArticleIndex socialImage(String socialImage) {
    
    
    
    
    this.socialImage = socialImage;
    return this;
  }

   /**
   * Get socialImage
   * @return socialImage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getSocialImage() {
    return socialImage;
  }


  public void setSocialImage(String socialImage) {
    
    
    
    this.socialImage = socialImage;
  }


  public ArticleIndex tagList(List<String> tagList) {
    
    
    
    
    this.tagList = tagList;
    return this;
  }

  public ArticleIndex addTagListItem(String tagListItem) {
    this.tagList.add(tagListItem);
    return this;
  }

   /**
   * Get tagList
   * @return tagList
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getTagList() {
    return tagList;
  }


  public void setTagList(List<String> tagList) {
    
    
    
    this.tagList = tagList;
  }


  public ArticleIndex slug(String slug) {
    
    
    
    
    this.slug = slug;
    return this;
  }

   /**
   * Get slug
   * @return slug
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getSlug() {
    return slug;
  }


  public void setSlug(String slug) {
    
    
    
    this.slug = slug;
  }


  public ArticleIndex path(String path) {
    
    
    
    
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    
    
    
    this.path = path;
  }


  public ArticleIndex url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }


  public ArticleIndex canonicalUrl(String canonicalUrl) {
    
    
    
    
    this.canonicalUrl = canonicalUrl;
    return this;
  }

   /**
   * Get canonicalUrl
   * @return canonicalUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCanonicalUrl() {
    return canonicalUrl;
  }


  public void setCanonicalUrl(String canonicalUrl) {
    
    
    
    this.canonicalUrl = canonicalUrl;
  }


  public ArticleIndex positiveReactionsCount(Integer positiveReactionsCount) {
    
    
    
    
    this.positiveReactionsCount = positiveReactionsCount;
    return this;
  }

   /**
   * Get positiveReactionsCount
   * @return positiveReactionsCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getPositiveReactionsCount() {
    return positiveReactionsCount;
  }


  public void setPositiveReactionsCount(Integer positiveReactionsCount) {
    
    
    
    this.positiveReactionsCount = positiveReactionsCount;
  }


  public ArticleIndex publicReactionsCount(Integer publicReactionsCount) {
    
    
    
    
    this.publicReactionsCount = publicReactionsCount;
    return this;
  }

   /**
   * Get publicReactionsCount
   * @return publicReactionsCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getPublicReactionsCount() {
    return publicReactionsCount;
  }


  public void setPublicReactionsCount(Integer publicReactionsCount) {
    
    
    
    this.publicReactionsCount = publicReactionsCount;
  }


  public ArticleIndex createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public ArticleIndex editedAt(OffsetDateTime editedAt) {
    
    
    
    
    this.editedAt = editedAt;
    return this;
  }

   /**
   * Get editedAt
   * @return editedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getEditedAt() {
    return editedAt;
  }


  public void setEditedAt(OffsetDateTime editedAt) {
    
    
    
    this.editedAt = editedAt;
  }


  public ArticleIndex crosspostedAt(OffsetDateTime crosspostedAt) {
    
    
    
    
    this.crosspostedAt = crosspostedAt;
    return this;
  }

   /**
   * Get crosspostedAt
   * @return crosspostedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getCrosspostedAt() {
    return crosspostedAt;
  }


  public void setCrosspostedAt(OffsetDateTime crosspostedAt) {
    
    
    
    this.crosspostedAt = crosspostedAt;
  }


  public ArticleIndex publishedAt(OffsetDateTime publishedAt) {
    
    
    
    
    this.publishedAt = publishedAt;
    return this;
  }

   /**
   * Get publishedAt
   * @return publishedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }


  public void setPublishedAt(OffsetDateTime publishedAt) {
    
    
    
    this.publishedAt = publishedAt;
  }


  public ArticleIndex lastCommentAt(OffsetDateTime lastCommentAt) {
    
    
    
    
    this.lastCommentAt = lastCommentAt;
    return this;
  }

   /**
   * Get lastCommentAt
   * @return lastCommentAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getLastCommentAt() {
    return lastCommentAt;
  }


  public void setLastCommentAt(OffsetDateTime lastCommentAt) {
    
    
    
    this.lastCommentAt = lastCommentAt;
  }


  public ArticleIndex publishedTimestamp(OffsetDateTime publishedTimestamp) {
    
    
    
    
    this.publishedTimestamp = publishedTimestamp;
    return this;
  }

   /**
   * Crossposting or published date time
   * @return publishedTimestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Crossposting or published date time")

  public OffsetDateTime getPublishedTimestamp() {
    return publishedTimestamp;
  }


  public void setPublishedTimestamp(OffsetDateTime publishedTimestamp) {
    
    
    
    this.publishedTimestamp = publishedTimestamp;
  }


  public ArticleIndex readingTimeMinutes(Integer readingTimeMinutes) {
    
    
    
    
    this.readingTimeMinutes = readingTimeMinutes;
    return this;
  }

   /**
   * Reading time, in minutes
   * @return readingTimeMinutes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Reading time, in minutes")

  public Integer getReadingTimeMinutes() {
    return readingTimeMinutes;
  }


  public void setReadingTimeMinutes(Integer readingTimeMinutes) {
    
    
    
    this.readingTimeMinutes = readingTimeMinutes;
  }


  public ArticleIndex user(SharedUser user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SharedUser getUser() {
    return user;
  }


  public void setUser(SharedUser user) {
    
    
    
    this.user = user;
  }


  public ArticleIndex flareTag(ArticleFlareTag flareTag) {
    
    
    
    
    this.flareTag = flareTag;
    return this;
  }

   /**
   * Get flareTag
   * @return flareTag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ArticleFlareTag getFlareTag() {
    return flareTag;
  }


  public void setFlareTag(ArticleFlareTag flareTag) {
    
    
    
    this.flareTag = flareTag;
  }


  public ArticleIndex organization(SharedOrganization organization) {
    
    
    
    
    this.organization = organization;
    return this;
  }

   /**
   * Get organization
   * @return organization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SharedOrganization getOrganization() {
    return organization;
  }


  public void setOrganization(SharedOrganization organization) {
    
    
    
    this.organization = organization;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ArticleIndex instance itself
   */
  public ArticleIndex putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArticleIndex articleIndex = (ArticleIndex) o;
    return Objects.equals(this.tags, articleIndex.tags) &&
        Objects.equals(this.title, articleIndex.title) &&
        Objects.equals(this.description, articleIndex.description) &&
        Objects.equals(this.typeOf, articleIndex.typeOf) &&
        Objects.equals(this.id, articleIndex.id) &&
        Objects.equals(this.coverImage, articleIndex.coverImage) &&
        Objects.equals(this.readablePublishDate, articleIndex.readablePublishDate) &&
        Objects.equals(this.socialImage, articleIndex.socialImage) &&
        Objects.equals(this.tagList, articleIndex.tagList) &&
        Objects.equals(this.slug, articleIndex.slug) &&
        Objects.equals(this.path, articleIndex.path) &&
        Objects.equals(this.url, articleIndex.url) &&
        Objects.equals(this.canonicalUrl, articleIndex.canonicalUrl) &&
        Objects.equals(this.positiveReactionsCount, articleIndex.positiveReactionsCount) &&
        Objects.equals(this.publicReactionsCount, articleIndex.publicReactionsCount) &&
        Objects.equals(this.createdAt, articleIndex.createdAt) &&
        Objects.equals(this.editedAt, articleIndex.editedAt) &&
        Objects.equals(this.crosspostedAt, articleIndex.crosspostedAt) &&
        Objects.equals(this.publishedAt, articleIndex.publishedAt) &&
        Objects.equals(this.lastCommentAt, articleIndex.lastCommentAt) &&
        Objects.equals(this.publishedTimestamp, articleIndex.publishedTimestamp) &&
        Objects.equals(this.readingTimeMinutes, articleIndex.readingTimeMinutes) &&
        Objects.equals(this.user, articleIndex.user) &&
        Objects.equals(this.flareTag, articleIndex.flareTag) &&
        Objects.equals(this.organization, articleIndex.organization)&&
        Objects.equals(this.additionalProperties, articleIndex.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, title, description, typeOf, id, coverImage, readablePublishDate, socialImage, tagList, slug, path, url, canonicalUrl, positiveReactionsCount, publicReactionsCount, createdAt, editedAt, crosspostedAt, publishedAt, lastCommentAt, publishedTimestamp, readingTimeMinutes, user, flareTag, organization, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArticleIndex {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    typeOf: ").append(toIndentedString(typeOf)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    coverImage: ").append(toIndentedString(coverImage)).append("\n");
    sb.append("    readablePublishDate: ").append(toIndentedString(readablePublishDate)).append("\n");
    sb.append("    socialImage: ").append(toIndentedString(socialImage)).append("\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    canonicalUrl: ").append(toIndentedString(canonicalUrl)).append("\n");
    sb.append("    positiveReactionsCount: ").append(toIndentedString(positiveReactionsCount)).append("\n");
    sb.append("    publicReactionsCount: ").append(toIndentedString(publicReactionsCount)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    editedAt: ").append(toIndentedString(editedAt)).append("\n");
    sb.append("    crosspostedAt: ").append(toIndentedString(crosspostedAt)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    lastCommentAt: ").append(toIndentedString(lastCommentAt)).append("\n");
    sb.append("    publishedTimestamp: ").append(toIndentedString(publishedTimestamp)).append("\n");
    sb.append("    readingTimeMinutes: ").append(toIndentedString(readingTimeMinutes)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    flareTag: ").append(toIndentedString(flareTag)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("type_of");
    openapiFields.add("id");
    openapiFields.add("cover_image");
    openapiFields.add("readable_publish_date");
    openapiFields.add("social_image");
    openapiFields.add("tag_list");
    openapiFields.add("slug");
    openapiFields.add("path");
    openapiFields.add("url");
    openapiFields.add("canonical_url");
    openapiFields.add("positive_reactions_count");
    openapiFields.add("public_reactions_count");
    openapiFields.add("created_at");
    openapiFields.add("edited_at");
    openapiFields.add("crossposted_at");
    openapiFields.add("published_at");
    openapiFields.add("last_comment_at");
    openapiFields.add("published_timestamp");
    openapiFields.add("reading_time_minutes");
    openapiFields.add("user");
    openapiFields.add("flare_tag");
    openapiFields.add("organization");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("type_of");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("cover_image");
    openapiRequiredFields.add("readable_publish_date");
    openapiRequiredFields.add("social_image");
    openapiRequiredFields.add("tag_list");
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("canonical_url");
    openapiRequiredFields.add("positive_reactions_count");
    openapiRequiredFields.add("public_reactions_count");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("edited_at");
    openapiRequiredFields.add("crossposted_at");
    openapiRequiredFields.add("published_at");
    openapiRequiredFields.add("last_comment_at");
    openapiRequiredFields.add("published_timestamp");
    openapiRequiredFields.add("reading_time_minutes");
    openapiRequiredFields.add("user");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ArticleIndex
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ArticleIndex.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArticleIndex is not found in the empty JSON string", ArticleIndex.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ArticleIndex.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("type_of").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_of` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_of").toString()));
      }
      if (!jsonObj.get("cover_image").isJsonNull() && !jsonObj.get("cover_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cover_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cover_image").toString()));
      }
      if (!jsonObj.get("readable_publish_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readable_publish_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readable_publish_date").toString()));
      }
      if (!jsonObj.get("social_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `social_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("social_image").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tag_list") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tag_list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_list` to be an array in the JSON string but got `%s`", jsonObj.get("tag_list").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("canonical_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonical_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonical_url").toString()));
      }
      // validate the required field `user`
      SharedUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
      // validate the optional field `flare_tag`
      if (jsonObj.get("flare_tag") != null && !jsonObj.get("flare_tag").isJsonNull()) {
        ArticleFlareTag.validateJsonObject(jsonObj.getAsJsonObject("flare_tag"));
      }
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        SharedOrganization.validateJsonObject(jsonObj.getAsJsonObject("organization"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArticleIndex.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArticleIndex' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArticleIndex> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArticleIndex.class));

       return (TypeAdapter<T>) new TypeAdapter<ArticleIndex>() {
           @Override
           public void write(JsonWriter out, ArticleIndex value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ArticleIndex read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ArticleIndex instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ArticleIndex given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ArticleIndex
  * @throws IOException if the JSON string is invalid with respect to ArticleIndex
  */
  public static ArticleIndex fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArticleIndex.class);
  }

 /**
  * Convert an instance of ArticleIndex to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

