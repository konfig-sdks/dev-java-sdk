/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ArticlesCreateNewArticleResponseUser;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ArticlesCreateNewArticleResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ArticlesCreateNewArticleResponse {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TYPE_OF = "type_of";
  @SerializedName(SERIALIZED_NAME_TYPE_OF)
  private String typeOf;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Double id;

  public static final String SERIALIZED_NAME_READABLE_PUBLISH_DATE = "readable_publish_date";
  @SerializedName(SERIALIZED_NAME_READABLE_PUBLISH_DATE)
  private String readablePublishDate;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_COMMENTS_COUNT = "comments_count";
  @SerializedName(SERIALIZED_NAME_COMMENTS_COUNT)
  private Double commentsCount;

  public static final String SERIALIZED_NAME_PUBLIC_REACTIONS_COUNT = "public_reactions_count";
  @SerializedName(SERIALIZED_NAME_PUBLIC_REACTIONS_COUNT)
  private Double publicReactionsCount;

  public static final String SERIALIZED_NAME_COLLECTION_ID = "collection_id";
  @SerializedName(SERIALIZED_NAME_COLLECTION_ID)
  private Double collectionId;

  public static final String SERIALIZED_NAME_PUBLISHED_TIMESTAMP = "published_timestamp";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_TIMESTAMP)
  private String publishedTimestamp;

  public static final String SERIALIZED_NAME_POSITIVE_REACTIONS_COUNT = "positive_reactions_count";
  @SerializedName(SERIALIZED_NAME_POSITIVE_REACTIONS_COUNT)
  private Double positiveReactionsCount;

  public static final String SERIALIZED_NAME_COVER_IMAGE = "cover_image";
  @SerializedName(SERIALIZED_NAME_COVER_IMAGE)
  private String coverImage;

  public static final String SERIALIZED_NAME_SOCIAL_IMAGE = "social_image";
  @SerializedName(SERIALIZED_NAME_SOCIAL_IMAGE)
  private String socialImage;

  public static final String SERIALIZED_NAME_CANONICAL_URL = "canonical_url";
  @SerializedName(SERIALIZED_NAME_CANONICAL_URL)
  private String canonicalUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_EDITED_AT = "edited_at";
  @SerializedName(SERIALIZED_NAME_EDITED_AT)
  private String editedAt;

  public static final String SERIALIZED_NAME_CROSSPOSTED_AT = "crossposted_at";
  @SerializedName(SERIALIZED_NAME_CROSSPOSTED_AT)
  private String crosspostedAt;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "published_at";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private String publishedAt;

  public static final String SERIALIZED_NAME_LAST_COMMENT_AT = "last_comment_at";
  @SerializedName(SERIALIZED_NAME_LAST_COMMENT_AT)
  private String lastCommentAt;

  public static final String SERIALIZED_NAME_READING_TIME_MINUTES = "reading_time_minutes";
  @SerializedName(SERIALIZED_NAME_READING_TIME_MINUTES)
  private Double readingTimeMinutes;

  public static final String SERIALIZED_NAME_TAG_LIST = "tag_list";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private String tagList;

  public static final String SERIALIZED_NAME_BODY_HTML = "body_html";
  @SerializedName(SERIALIZED_NAME_BODY_HTML)
  private String bodyHtml;

  public static final String SERIALIZED_NAME_BODY_MARKDOWN = "body_markdown";
  @SerializedName(SERIALIZED_NAME_BODY_MARKDOWN)
  private String bodyMarkdown;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private ArticlesCreateNewArticleResponseUser user;

  public ArticlesCreateNewArticleResponse() {
  }

  public ArticlesCreateNewArticleResponse tags(List<String> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public ArticlesCreateNewArticleResponse addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    
    
    
    this.tags = tags;
  }


  public ArticlesCreateNewArticleResponse title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "New article", value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public ArticlesCreateNewArticleResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "New post example", value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ArticlesCreateNewArticleResponse typeOf(String typeOf) {
    
    
    
    
    this.typeOf = typeOf;
    return this;
  }

   /**
   * Get typeOf
   * @return typeOf
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "article", value = "")

  public String getTypeOf() {
    return typeOf;
  }


  public void setTypeOf(String typeOf) {
    
    
    
    this.typeOf = typeOf;
  }


  public ArticlesCreateNewArticleResponse id(Double id) {
    
    
    
    
    this.id = id;
    return this;
  }

  public ArticlesCreateNewArticleResponse id(Integer id) {
    
    
    
    
    this.id = id.doubleValue();
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "")

  public Double getId() {
    return id;
  }


  public void setId(Double id) {
    
    
    
    this.id = id;
  }


  public ArticlesCreateNewArticleResponse readablePublishDate(String readablePublishDate) {
    
    
    
    
    this.readablePublishDate = readablePublishDate;
    return this;
  }

   /**
   * Get readablePublishDate
   * @return readablePublishDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Dec 15", value = "")

  public String getReadablePublishDate() {
    return readablePublishDate;
  }


  public void setReadablePublishDate(String readablePublishDate) {
    
    
    
    this.readablePublishDate = readablePublishDate;
  }


  public ArticlesCreateNewArticleResponse slug(String slug) {
    
    
    
    
    this.slug = slug;
    return this;
  }

   /**
   * Get slug
   * @return slug
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "new-article-2io1", value = "")

  public String getSlug() {
    return slug;
  }


  public void setSlug(String slug) {
    
    
    
    this.slug = slug;
  }


  public ArticlesCreateNewArticleResponse path(String path) {
    
    
    
    
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/username2/new-article-2io1", value = "")

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    
    
    
    this.path = path;
  }


  public ArticlesCreateNewArticleResponse url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://forem.test/username2/new-article-2io1", value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }


  public ArticlesCreateNewArticleResponse commentsCount(Double commentsCount) {
    
    
    
    
    this.commentsCount = commentsCount;
    return this;
  }

  public ArticlesCreateNewArticleResponse commentsCount(Integer commentsCount) {
    
    
    
    
    this.commentsCount = commentsCount.doubleValue();
    return this;
  }

   /**
   * Get commentsCount
   * @return commentsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public Double getCommentsCount() {
    return commentsCount;
  }


  public void setCommentsCount(Double commentsCount) {
    
    
    
    this.commentsCount = commentsCount;
  }


  public ArticlesCreateNewArticleResponse publicReactionsCount(Double publicReactionsCount) {
    
    
    
    
    this.publicReactionsCount = publicReactionsCount;
    return this;
  }

  public ArticlesCreateNewArticleResponse publicReactionsCount(Integer publicReactionsCount) {
    
    
    
    
    this.publicReactionsCount = publicReactionsCount.doubleValue();
    return this;
  }

   /**
   * Get publicReactionsCount
   * @return publicReactionsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public Double getPublicReactionsCount() {
    return publicReactionsCount;
  }


  public void setPublicReactionsCount(Double publicReactionsCount) {
    
    
    
    this.publicReactionsCount = publicReactionsCount;
  }


  public ArticlesCreateNewArticleResponse collectionId(Double collectionId) {
    
    
    
    
    this.collectionId = collectionId;
    return this;
  }

  public ArticlesCreateNewArticleResponse collectionId(Integer collectionId) {
    
    
    
    
    this.collectionId = collectionId.doubleValue();
    return this;
  }

   /**
   * Get collectionId
   * @return collectionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Double getCollectionId() {
    return collectionId;
  }


  public void setCollectionId(Double collectionId) {
    
    
    
    this.collectionId = collectionId;
  }


  public ArticlesCreateNewArticleResponse publishedTimestamp(String publishedTimestamp) {
    
    
    
    
    this.publishedTimestamp = publishedTimestamp;
    return this;
  }

   /**
   * Get publishedTimestamp
   * @return publishedTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-12-15T00:15:27Z", value = "")

  public String getPublishedTimestamp() {
    return publishedTimestamp;
  }


  public void setPublishedTimestamp(String publishedTimestamp) {
    
    
    
    this.publishedTimestamp = publishedTimestamp;
  }


  public ArticlesCreateNewArticleResponse positiveReactionsCount(Double positiveReactionsCount) {
    
    
    
    
    this.positiveReactionsCount = positiveReactionsCount;
    return this;
  }

  public ArticlesCreateNewArticleResponse positiveReactionsCount(Integer positiveReactionsCount) {
    
    
    
    
    this.positiveReactionsCount = positiveReactionsCount.doubleValue();
    return this;
  }

   /**
   * Get positiveReactionsCount
   * @return positiveReactionsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public Double getPositiveReactionsCount() {
    return positiveReactionsCount;
  }


  public void setPositiveReactionsCount(Double positiveReactionsCount) {
    
    
    
    this.positiveReactionsCount = positiveReactionsCount;
  }


  public ArticlesCreateNewArticleResponse coverImage(String coverImage) {
    
    
    
    
    this.coverImage = coverImage;
    return this;
  }

   /**
   * Get coverImage
   * @return coverImage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://thepracticaldev.s3.amazonaws.com/i/5wfo25724gzgk5e5j50g.jpg", value = "")

  public String getCoverImage() {
    return coverImage;
  }


  public void setCoverImage(String coverImage) {
    
    
    
    this.coverImage = coverImage;
  }


  public ArticlesCreateNewArticleResponse socialImage(String socialImage) {
    
    
    
    
    this.socialImage = socialImage;
    return this;
  }

   /**
   * Get socialImage
   * @return socialImage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://thepracticaldev.s3.amazonaws.com/i/5wfo25724gzgk5e5j50g.jpg", value = "")

  public String getSocialImage() {
    return socialImage;
  }


  public void setSocialImage(String socialImage) {
    
    
    
    this.socialImage = socialImage;
  }


  public ArticlesCreateNewArticleResponse canonicalUrl(String canonicalUrl) {
    
    
    
    
    this.canonicalUrl = canonicalUrl;
    return this;
  }

   /**
   * Get canonicalUrl
   * @return canonicalUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://dev.to/fdocr/headless-chrome-dual-mode-tests-for-ruby-on-rails-4p6g", value = "")

  public String getCanonicalUrl() {
    return canonicalUrl;
  }


  public void setCanonicalUrl(String canonicalUrl) {
    
    
    
    this.canonicalUrl = canonicalUrl;
  }


  public ArticlesCreateNewArticleResponse createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-12-15T00:15:27Z", value = "")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public ArticlesCreateNewArticleResponse editedAt(String editedAt) {
    
    
    
    
    this.editedAt = editedAt;
    return this;
  }

   /**
   * Get editedAt
   * @return editedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEditedAt() {
    return editedAt;
  }


  public void setEditedAt(String editedAt) {
    
    
    
    this.editedAt = editedAt;
  }


  public ArticlesCreateNewArticleResponse crosspostedAt(String crosspostedAt) {
    
    
    
    
    this.crosspostedAt = crosspostedAt;
    return this;
  }

   /**
   * Get crosspostedAt
   * @return crosspostedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCrosspostedAt() {
    return crosspostedAt;
  }


  public void setCrosspostedAt(String crosspostedAt) {
    
    
    
    this.crosspostedAt = crosspostedAt;
  }


  public ArticlesCreateNewArticleResponse publishedAt(String publishedAt) {
    
    
    
    
    this.publishedAt = publishedAt;
    return this;
  }

   /**
   * Get publishedAt
   * @return publishedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-12-15T00:15:27Z", value = "")

  public String getPublishedAt() {
    return publishedAt;
  }


  public void setPublishedAt(String publishedAt) {
    
    
    
    this.publishedAt = publishedAt;
  }


  public ArticlesCreateNewArticleResponse lastCommentAt(String lastCommentAt) {
    
    
    
    
    this.lastCommentAt = lastCommentAt;
    return this;
  }

   /**
   * Get lastCommentAt
   * @return lastCommentAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-12-15T00:15:27Z", value = "")

  public String getLastCommentAt() {
    return lastCommentAt;
  }


  public void setLastCommentAt(String lastCommentAt) {
    
    
    
    this.lastCommentAt = lastCommentAt;
  }


  public ArticlesCreateNewArticleResponse readingTimeMinutes(Double readingTimeMinutes) {
    
    
    
    
    this.readingTimeMinutes = readingTimeMinutes;
    return this;
  }

  public ArticlesCreateNewArticleResponse readingTimeMinutes(Integer readingTimeMinutes) {
    
    
    
    
    this.readingTimeMinutes = readingTimeMinutes.doubleValue();
    return this;
  }

   /**
   * Get readingTimeMinutes
   * @return readingTimeMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Double getReadingTimeMinutes() {
    return readingTimeMinutes;
  }


  public void setReadingTimeMinutes(Double readingTimeMinutes) {
    
    
    
    this.readingTimeMinutes = readingTimeMinutes;
  }


  public ArticlesCreateNewArticleResponse tagList(String tagList) {
    
    
    
    
    this.tagList = tagList;
    return this;
  }

   /**
   * Get tagList
   * @return tagList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getTagList() {
    return tagList;
  }


  public void setTagList(String tagList) {
    
    
    
    this.tagList = tagList;
  }


  public ArticlesCreateNewArticleResponse bodyHtml(String bodyHtml) {
    
    
    
    
    this.bodyHtml = bodyHtml;
    return this;
  }

   /**
   * Get bodyHtml
   * @return bodyHtml
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<p><strong>New</strong> body for the article</p>  ", value = "")

  public String getBodyHtml() {
    return bodyHtml;
  }


  public void setBodyHtml(String bodyHtml) {
    
    
    
    this.bodyHtml = bodyHtml;
  }


  public ArticlesCreateNewArticleResponse bodyMarkdown(String bodyMarkdown) {
    
    
    
    
    this.bodyMarkdown = bodyMarkdown;
    return this;
  }

   /**
   * Get bodyMarkdown
   * @return bodyMarkdown
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "**New** body for the article", value = "")

  public String getBodyMarkdown() {
    return bodyMarkdown;
  }


  public void setBodyMarkdown(String bodyMarkdown) {
    
    
    
    this.bodyMarkdown = bodyMarkdown;
  }


  public ArticlesCreateNewArticleResponse user(ArticlesCreateNewArticleResponseUser user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ArticlesCreateNewArticleResponseUser getUser() {
    return user;
  }


  public void setUser(ArticlesCreateNewArticleResponseUser user) {
    
    
    
    this.user = user;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ArticlesCreateNewArticleResponse instance itself
   */
  public ArticlesCreateNewArticleResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArticlesCreateNewArticleResponse articlesCreateNewArticleResponse = (ArticlesCreateNewArticleResponse) o;
    return Objects.equals(this.tags, articlesCreateNewArticleResponse.tags) &&
        Objects.equals(this.title, articlesCreateNewArticleResponse.title) &&
        Objects.equals(this.description, articlesCreateNewArticleResponse.description) &&
        Objects.equals(this.typeOf, articlesCreateNewArticleResponse.typeOf) &&
        Objects.equals(this.id, articlesCreateNewArticleResponse.id) &&
        Objects.equals(this.readablePublishDate, articlesCreateNewArticleResponse.readablePublishDate) &&
        Objects.equals(this.slug, articlesCreateNewArticleResponse.slug) &&
        Objects.equals(this.path, articlesCreateNewArticleResponse.path) &&
        Objects.equals(this.url, articlesCreateNewArticleResponse.url) &&
        Objects.equals(this.commentsCount, articlesCreateNewArticleResponse.commentsCount) &&
        Objects.equals(this.publicReactionsCount, articlesCreateNewArticleResponse.publicReactionsCount) &&
        Objects.equals(this.collectionId, articlesCreateNewArticleResponse.collectionId) &&
        Objects.equals(this.publishedTimestamp, articlesCreateNewArticleResponse.publishedTimestamp) &&
        Objects.equals(this.positiveReactionsCount, articlesCreateNewArticleResponse.positiveReactionsCount) &&
        Objects.equals(this.coverImage, articlesCreateNewArticleResponse.coverImage) &&
        Objects.equals(this.socialImage, articlesCreateNewArticleResponse.socialImage) &&
        Objects.equals(this.canonicalUrl, articlesCreateNewArticleResponse.canonicalUrl) &&
        Objects.equals(this.createdAt, articlesCreateNewArticleResponse.createdAt) &&
        Objects.equals(this.editedAt, articlesCreateNewArticleResponse.editedAt) &&
        Objects.equals(this.crosspostedAt, articlesCreateNewArticleResponse.crosspostedAt) &&
        Objects.equals(this.publishedAt, articlesCreateNewArticleResponse.publishedAt) &&
        Objects.equals(this.lastCommentAt, articlesCreateNewArticleResponse.lastCommentAt) &&
        Objects.equals(this.readingTimeMinutes, articlesCreateNewArticleResponse.readingTimeMinutes) &&
        Objects.equals(this.tagList, articlesCreateNewArticleResponse.tagList) &&
        Objects.equals(this.bodyHtml, articlesCreateNewArticleResponse.bodyHtml) &&
        Objects.equals(this.bodyMarkdown, articlesCreateNewArticleResponse.bodyMarkdown) &&
        Objects.equals(this.user, articlesCreateNewArticleResponse.user)&&
        Objects.equals(this.additionalProperties, articlesCreateNewArticleResponse.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, title, description, typeOf, id, readablePublishDate, slug, path, url, commentsCount, publicReactionsCount, collectionId, publishedTimestamp, positiveReactionsCount, coverImage, socialImage, canonicalUrl, createdAt, editedAt, crosspostedAt, publishedAt, lastCommentAt, readingTimeMinutes, tagList, bodyHtml, bodyMarkdown, user, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArticlesCreateNewArticleResponse {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    typeOf: ").append(toIndentedString(typeOf)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    readablePublishDate: ").append(toIndentedString(readablePublishDate)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    commentsCount: ").append(toIndentedString(commentsCount)).append("\n");
    sb.append("    publicReactionsCount: ").append(toIndentedString(publicReactionsCount)).append("\n");
    sb.append("    collectionId: ").append(toIndentedString(collectionId)).append("\n");
    sb.append("    publishedTimestamp: ").append(toIndentedString(publishedTimestamp)).append("\n");
    sb.append("    positiveReactionsCount: ").append(toIndentedString(positiveReactionsCount)).append("\n");
    sb.append("    coverImage: ").append(toIndentedString(coverImage)).append("\n");
    sb.append("    socialImage: ").append(toIndentedString(socialImage)).append("\n");
    sb.append("    canonicalUrl: ").append(toIndentedString(canonicalUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    editedAt: ").append(toIndentedString(editedAt)).append("\n");
    sb.append("    crosspostedAt: ").append(toIndentedString(crosspostedAt)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    lastCommentAt: ").append(toIndentedString(lastCommentAt)).append("\n");
    sb.append("    readingTimeMinutes: ").append(toIndentedString(readingTimeMinutes)).append("\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    bodyHtml: ").append(toIndentedString(bodyHtml)).append("\n");
    sb.append("    bodyMarkdown: ").append(toIndentedString(bodyMarkdown)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("type_of");
    openapiFields.add("id");
    openapiFields.add("readable_publish_date");
    openapiFields.add("slug");
    openapiFields.add("path");
    openapiFields.add("url");
    openapiFields.add("comments_count");
    openapiFields.add("public_reactions_count");
    openapiFields.add("collection_id");
    openapiFields.add("published_timestamp");
    openapiFields.add("positive_reactions_count");
    openapiFields.add("cover_image");
    openapiFields.add("social_image");
    openapiFields.add("canonical_url");
    openapiFields.add("created_at");
    openapiFields.add("edited_at");
    openapiFields.add("crossposted_at");
    openapiFields.add("published_at");
    openapiFields.add("last_comment_at");
    openapiFields.add("reading_time_minutes");
    openapiFields.add("tag_list");
    openapiFields.add("body_html");
    openapiFields.add("body_markdown");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ArticlesCreateNewArticleResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ArticlesCreateNewArticleResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArticlesCreateNewArticleResponse is not found in the empty JSON string", ArticlesCreateNewArticleResponse.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("type_of") != null && !jsonObj.get("type_of").isJsonNull()) && !jsonObj.get("type_of").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_of` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_of").toString()));
      }
      if ((jsonObj.get("readable_publish_date") != null && !jsonObj.get("readable_publish_date").isJsonNull()) && !jsonObj.get("readable_publish_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readable_publish_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readable_publish_date").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("published_timestamp") != null && !jsonObj.get("published_timestamp").isJsonNull()) && !jsonObj.get("published_timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published_timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published_timestamp").toString()));
      }
      if ((jsonObj.get("cover_image") != null && !jsonObj.get("cover_image").isJsonNull()) && !jsonObj.get("cover_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cover_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cover_image").toString()));
      }
      if ((jsonObj.get("social_image") != null && !jsonObj.get("social_image").isJsonNull()) && !jsonObj.get("social_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `social_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("social_image").toString()));
      }
      if ((jsonObj.get("canonical_url") != null && !jsonObj.get("canonical_url").isJsonNull()) && !jsonObj.get("canonical_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonical_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonical_url").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (!jsonObj.get("edited_at").isJsonNull() && (jsonObj.get("edited_at") != null && !jsonObj.get("edited_at").isJsonNull()) && !jsonObj.get("edited_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edited_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edited_at").toString()));
      }
      if (!jsonObj.get("crossposted_at").isJsonNull() && (jsonObj.get("crossposted_at") != null && !jsonObj.get("crossposted_at").isJsonNull()) && !jsonObj.get("crossposted_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crossposted_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crossposted_at").toString()));
      }
      if ((jsonObj.get("published_at") != null && !jsonObj.get("published_at").isJsonNull()) && !jsonObj.get("published_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published_at").toString()));
      }
      if ((jsonObj.get("last_comment_at") != null && !jsonObj.get("last_comment_at").isJsonNull()) && !jsonObj.get("last_comment_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_comment_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_comment_at").toString()));
      }
      if ((jsonObj.get("tag_list") != null && !jsonObj.get("tag_list").isJsonNull()) && !jsonObj.get("tag_list").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_list` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_list").toString()));
      }
      if ((jsonObj.get("body_html") != null && !jsonObj.get("body_html").isJsonNull()) && !jsonObj.get("body_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_html").toString()));
      }
      if ((jsonObj.get("body_markdown") != null && !jsonObj.get("body_markdown").isJsonNull()) && !jsonObj.get("body_markdown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_markdown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_markdown").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        ArticlesCreateNewArticleResponseUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArticlesCreateNewArticleResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArticlesCreateNewArticleResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArticlesCreateNewArticleResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArticlesCreateNewArticleResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ArticlesCreateNewArticleResponse>() {
           @Override
           public void write(JsonWriter out, ArticlesCreateNewArticleResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ArticlesCreateNewArticleResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ArticlesCreateNewArticleResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ArticlesCreateNewArticleResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ArticlesCreateNewArticleResponse
  * @throws IOException if the JSON string is invalid with respect to ArticlesCreateNewArticleResponse
  */
  public static ArticlesCreateNewArticleResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArticlesCreateNewArticleResponse.class);
  }

 /**
  * Convert an instance of ArticlesCreateNewArticleResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

