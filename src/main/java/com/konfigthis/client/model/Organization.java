/*
 * Forem API V1
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Representation of an Organization
 */
@ApiModel(description = "Representation of an Organization")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Organization {
  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_TYPE_OF = "type_of";
  @SerializedName(SERIALIZED_NAME_TYPE_OF)
  private String typeOf;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TWITTER_USERNAME = "twitter_username";
  @SerializedName(SERIALIZED_NAME_TWITTER_USERNAME)
  private String twitterUsername;

  public static final String SERIALIZED_NAME_GITHUB_USERNAME = "github_username";
  @SerializedName(SERIALIZED_NAME_GITHUB_USERNAME)
  private String githubUsername;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_JOINED_AT = "joined_at";
  @SerializedName(SERIALIZED_NAME_JOINED_AT)
  private String joinedAt;

  public static final String SERIALIZED_NAME_TECH_STACK = "tech_stack";
  @SerializedName(SERIALIZED_NAME_TECH_STACK)
  private String techStack;

  public static final String SERIALIZED_NAME_TAG_LINE = "tag_line";
  @SerializedName(SERIALIZED_NAME_TAG_LINE)
  private String tagLine;

  public static final String SERIALIZED_NAME_STORY = "story";
  @SerializedName(SERIALIZED_NAME_STORY)
  private String story;

  public Organization() {
  }

  public Organization summary(String summary) {
    
    
    
    
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSummary() {
    return summary;
  }


  public void setSummary(String summary) {
    
    
    
    this.summary = summary;
  }


  public Organization typeOf(String typeOf) {
    
    
    
    
    this.typeOf = typeOf;
    return this;
  }

   /**
   * Get typeOf
   * @return typeOf
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTypeOf() {
    return typeOf;
  }


  public void setTypeOf(String typeOf) {
    
    
    
    this.typeOf = typeOf;
  }


  public Organization username(String username) {
    
    
    
    
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    
    
    
    this.username = username;
  }


  public Organization name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Organization twitterUsername(String twitterUsername) {
    
    
    
    
    this.twitterUsername = twitterUsername;
    return this;
  }

   /**
   * Get twitterUsername
   * @return twitterUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTwitterUsername() {
    return twitterUsername;
  }


  public void setTwitterUsername(String twitterUsername) {
    
    
    
    this.twitterUsername = twitterUsername;
  }


  public Organization githubUsername(String githubUsername) {
    
    
    
    
    this.githubUsername = githubUsername;
    return this;
  }

   /**
   * Get githubUsername
   * @return githubUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGithubUsername() {
    return githubUsername;
  }


  public void setGithubUsername(String githubUsername) {
    
    
    
    this.githubUsername = githubUsername;
  }


  public Organization url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }


  public Organization location(String location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    
    
    
    this.location = location;
  }


  public Organization joinedAt(String joinedAt) {
    
    
    
    
    this.joinedAt = joinedAt;
    return this;
  }

   /**
   * Get joinedAt
   * @return joinedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getJoinedAt() {
    return joinedAt;
  }


  public void setJoinedAt(String joinedAt) {
    
    
    
    this.joinedAt = joinedAt;
  }


  public Organization techStack(String techStack) {
    
    
    
    
    this.techStack = techStack;
    return this;
  }

   /**
   * Get techStack
   * @return techStack
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTechStack() {
    return techStack;
  }


  public void setTechStack(String techStack) {
    
    
    
    this.techStack = techStack;
  }


  public Organization tagLine(String tagLine) {
    
    
    
    
    this.tagLine = tagLine;
    return this;
  }

   /**
   * Get tagLine
   * @return tagLine
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTagLine() {
    return tagLine;
  }


  public void setTagLine(String tagLine) {
    
    
    
    this.tagLine = tagLine;
  }


  public Organization story(String story) {
    
    
    
    
    this.story = story;
    return this;
  }

   /**
   * Get story
   * @return story
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStory() {
    return story;
  }


  public void setStory(String story) {
    
    
    
    this.story = story;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Organization instance itself
   */
  public Organization putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Organization organization = (Organization) o;
    return Objects.equals(this.summary, organization.summary) &&
        Objects.equals(this.typeOf, organization.typeOf) &&
        Objects.equals(this.username, organization.username) &&
        Objects.equals(this.name, organization.name) &&
        Objects.equals(this.twitterUsername, organization.twitterUsername) &&
        Objects.equals(this.githubUsername, organization.githubUsername) &&
        Objects.equals(this.url, organization.url) &&
        Objects.equals(this.location, organization.location) &&
        Objects.equals(this.joinedAt, organization.joinedAt) &&
        Objects.equals(this.techStack, organization.techStack) &&
        Objects.equals(this.tagLine, organization.tagLine) &&
        Objects.equals(this.story, organization.story)&&
        Objects.equals(this.additionalProperties, organization.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(summary, typeOf, username, name, twitterUsername, githubUsername, url, location, joinedAt, techStack, tagLine, story, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Organization {\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    typeOf: ").append(toIndentedString(typeOf)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    twitterUsername: ").append(toIndentedString(twitterUsername)).append("\n");
    sb.append("    githubUsername: ").append(toIndentedString(githubUsername)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    joinedAt: ").append(toIndentedString(joinedAt)).append("\n");
    sb.append("    techStack: ").append(toIndentedString(techStack)).append("\n");
    sb.append("    tagLine: ").append(toIndentedString(tagLine)).append("\n");
    sb.append("    story: ").append(toIndentedString(story)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("summary");
    openapiFields.add("type_of");
    openapiFields.add("username");
    openapiFields.add("name");
    openapiFields.add("twitter_username");
    openapiFields.add("github_username");
    openapiFields.add("url");
    openapiFields.add("location");
    openapiFields.add("joined_at");
    openapiFields.add("tech_stack");
    openapiFields.add("tag_line");
    openapiFields.add("story");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Organization
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Organization.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Organization is not found in the empty JSON string", Organization.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if ((jsonObj.get("type_of") != null && !jsonObj.get("type_of").isJsonNull()) && !jsonObj.get("type_of").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_of` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_of").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("twitter_username") != null && !jsonObj.get("twitter_username").isJsonNull()) && !jsonObj.get("twitter_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitter_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitter_username").toString()));
      }
      if ((jsonObj.get("github_username") != null && !jsonObj.get("github_username").isJsonNull()) && !jsonObj.get("github_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `github_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("github_username").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("joined_at") != null && !jsonObj.get("joined_at").isJsonNull()) && !jsonObj.get("joined_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `joined_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("joined_at").toString()));
      }
      if ((jsonObj.get("tech_stack") != null && !jsonObj.get("tech_stack").isJsonNull()) && !jsonObj.get("tech_stack").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tech_stack` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tech_stack").toString()));
      }
      if (!jsonObj.get("tag_line").isJsonNull() && (jsonObj.get("tag_line") != null && !jsonObj.get("tag_line").isJsonNull()) && !jsonObj.get("tag_line").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_line` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_line").toString()));
      }
      if (!jsonObj.get("story").isJsonNull() && (jsonObj.get("story") != null && !jsonObj.get("story").isJsonNull()) && !jsonObj.get("story").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `story` to be a primitive type in the JSON string but got `%s`", jsonObj.get("story").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Organization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Organization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Organization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Organization.class));

       return (TypeAdapter<T>) new TypeAdapter<Organization>() {
           @Override
           public void write(JsonWriter out, Organization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Organization read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Organization instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Organization given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Organization
  * @throws IOException if the JSON string is invalid with respect to Organization
  */
  public static Organization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Organization.class);
  }

 /**
  * Convert an instance of Organization to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

